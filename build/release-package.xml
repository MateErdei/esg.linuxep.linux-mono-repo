<?xml version='1.0' encoding='utf-8'?>
<package name="linux-mono-repo" version="1.0.0">
    <inputs>
        <workingdir>.</workingdir>

        <build-asset project="em" repo="esg">
            <release-version branch="release/LINUX-2023.4" build-id="20231020071347-6b2fd64f4c73f770fa390965a0fd8c53fb203755-9VIsCw"/>
            <development-version branch="develop"/>
            <include artifact-path="bazel-tools" dest-dir="."/>
            <include artifact-path="sophlib/BUILD" dest-dir="common/sophlib"/>
            <include artifact-path="sophlib/include" dest-dir="common/sophlib/include/sophlib"/>
            <include artifact-path="sophlib/linux_x64_rel/lib" dest-dir="common/sophlib/linux_x64_release/lib"/>
            <include artifact-path="sophlib/linux_arm64_rel/lib" dest-dir="common/sophlib/linux_arm64_release/lib"/>
            <include artifact-path="sophlib/linux_x64_rel/sdds3_tools" dest-dir="imports/internal/sdds3_utils"/>
            <include artifact-path="common/journal/linux_x64_rel/libs" dest-dir="common/journal/linux_x64_release"/>
            <include artifact-path="common/journal/linux_x64_rel/tools" dest-dir="common/journal/linux_x64_release"/>
            <include artifact-path="common/journal/linux_arm64_rel/libs" dest-dir="common/journal/linux_arm64_release"/>
            <include artifact-path="common/journal/linux_arm64_rel/tools" dest-dir="common/journal/linux_arm64_release"/>
            <include artifact-path="common/livequery/linux_x64_rel/lib" dest-dir="common/livequery/linux_x64_release"/>
            <include artifact-path="common/livequery/linux_arm64_rel/lib" dest-dir="common/livequery/linux_arm64_release"/>
            <include artifact-path="common/livequery/include" dest-dir="common/livequery/include"/>
            <include artifact-path="common/safestore/linux_x64_rel/safestore" dest-dir="common/safestore/linux_x64_rel"/>
            <include artifact-path="common/safestore/linux_arm64_rel/safestore" dest-dir="common/safestore/linux_arm64_rel"/>
        </build-asset>

        <!-- SUSI imports -->
        <build-asset project="core" repo="engine">
            <release-version branch="release--3.89.0" build-id="20230915145859-a4679b8647d3831c5b46549ca893aa4a209cd9eb-5zKA9B"/>
            <include artifact-path="libsavi_linux64_release_gcc4-9-4glibc2-3-2" dest-dir="imports/internal/susi/x86_64/libsavi"/>
            <include artifact-path="libsavi_linuxarm64_release_gcc9-4-0glibc2-17" dest-dir="imports/internal/susi/arm64/libsavi"/>
        </build-asset>
        <!-- Once a new engine build is released, this block should be merged with the above -->
        <build-asset project="core" repo="engine">
            <release-version branch="release--sophtainer-1.6.1" build-id="20230516124421-ef8a1e891d8b0f0d14a66f5bb6edbeeffd7213d9-uJpaAr"/>
            <include artifact-path="sophtainer_linux64_release_gcc4-9-4glibc2-3-4" dest-dir="imports/internal/susi/x86_64/libsophtainer"/>
            <include artifact-path="sophtainer_linuxarm64_release_gcc9-4-0glibc2-17" dest-dir="imports/internal/susi/arm64/libsophtainer"/>
        </build-asset>
        <build-asset project="core" repo="liblocalrep">
            <release-version branch="release/2.5" build-id="20230330092449-994f1a1c8286d86eb47ffa224f3d1cf12e63a04e-NTDWhc"/>
            <include artifact-path="release/linux64/bin" dest-dir="imports/internal/susi/x86_64/lrlib"/>
            <include artifact-path="release/linuxarm64/bin" dest-dir="imports/internal/susi/arm64/lrlib"/>
        </build-asset>
        <build-asset project="core" repo="susi">
            <release-version branch="release/2.4" build-id="20231006085540-f5623c8fbdf8b2cb2a0eda9bc2d3d4addb84c039-AfQt2A"/>
<!--            <development-version branch="develop"/>-->
            <include artifact-path="release/linux/libsusi" dest-dir="imports/internal/susi/x86_64/lib"/>
            <include artifact-path="release/linux/updater" dest-dir="imports/internal/susi/x86_64/lib"/>
        </build-asset>
        <build-asset project="core" repo="susi">
            <release-version branch="release/2.4" build-id="20231024100347-f6ce268182629de7b2b884c2376ea28c138f79f0-MYa4oR"/>
<!--            <development-version branch="develop"/>-->
            <include artifact-path="release/linux/interface" dest-dir="imports/internal/susi/include"/>
            <include artifact-path="release/rules" dest-dir="imports/internal/susi/rules"/>
            <include artifact-path="release/linux-arm64/libsusi" dest-dir="imports/internal/susi/arm64/lib"/>
            <include artifact-path="release/linux-arm64/updater" dest-dir="imports/internal/susi/arm64/lib"/>
        </build-asset>
        <build-asset project="core" repo="httpsrequester">
            <release-version branch="release--1.5" build-id="20231019124458-4ca0fcb44d53532d9d8363928af42fd0b982a115-uPHoTv"/>
            <include artifact-path="release/linux/libglobalrep" dest-dir="imports/internal/susi/x86_64/grlib"/>
            <include artifact-path="release/linux-arm64/libglobalrep" dest-dir="imports/internal/susi/arm64/grlib"/>
        </build-asset>
        <!-- external dependencies -->
        <build-asset project="thirdparty" repo="icu">
            <release-version branch="release--sophos--susi--70.1" build-id="20211122160606-cae4f46bbfdecde35f62a69e9b31f240348c0f8f-hYx1a2" />
            <include artifact-path="linux-x64/lib" dest-dir="imports/internal/susi/x86_64/icu/lib"/>
        </build-asset>
        <build-asset project="thirdparty" repo="icu">
            <release-version branch="release--sophos--susi--70.1" build-id="20220722153742-1e1ca0c9aa4a6c8c4635d28425fca7f5fbf5860c-bm19h8" />
            <include artifact-path="linux-arm64/lib" dest-dir="imports/internal/susi/arm64/icu/lib"/>
        </build-asset>
        <build-asset project="thirdparty" repo="libarchive">
            <release-version branch="release--sophos--core--3.5.2" build-id="20220830091606-26250850af1ca762e02788c56d5b4a8c4c13c5e6-8fcn7J"/>
            <include artifact-path="release/linux-x64/lib" dest-dir="imports/internal/susi/x86_64/libarchive/lib"/>
            <include artifact-path="release/linux-arm64/lib" dest-dir="imports/internal/susi/arm64/libarchive/lib"/>
        </build-asset>
        <build-asset project="thirdparty" repo="luajit">
            <release-version branch="release--sophos--susi--2.1.0" build-id="20211004080500-1a9d72db49c57f6eabb70705001bd654d3da99ed-NeJf83"/>
            <include artifact-path="linux-x64/lib" dest-dir="imports/internal/susi/x86_64/luajit/lib"/>
        </build-asset>

        <build-asset project="thirdparty" repo="luajit">
            <release-version branch="release--sophos--susi--2.1.0" build-id="20220727135014-9cbc27524fe49a6bbca55b78406657ace2cd384a-YBhu0T"/>
            <include artifact-path="linux-arm64/lib" dest-dir="imports/internal/susi/arm64/luajit/lib"/>
        </build-asset>

        <build-asset project="winep" repo="liveterminal">
             <release-version branch="release/2023-43-linux" build-id="20231023081639-220516888f5f376e1d91320254483e3901569bf1-7KBVB8"/>
            <development-version branch="develop" />
            <include artifact-path="sspl-liveterminal/rust_binary_x64" dest-dir="liveterminal/products/installer/rust-liveterminal-x64" />
            <include artifact-path="sspl-liveterminal/rust_binary_arm64" dest-dir="liveterminal/products/installer/rust-liveterminal-arm64" />
        </build-asset>

        <trusted-asset artifact-path="com.nlohmann/json/3.11.2/nlohmann-json-include" dest-dir="imports/thirdparty/nlohmann-json"/>
        <trusted-asset artifact-path="com.osquery/osquery/5.8.2/osquery-5.8.2-linux" dest-dir="imports/thirdparty/osquery/linux_x64_rel"/>
        <trusted-asset artifact-path="com.osquery/osquery/5.8.2/osquery-5.8.2_1.linux_aarch64" dest-dir="imports/thirdparty/osquery/linux_arm64_rel"/>
        <trusted-asset artifact-path="filer5-migrate/pscerts/1-0-1/67228/ps_certificates/ps_rootca.crt" dest-dir="thininstaller/certs"/>
        <trusted-asset artifact-path="com.github/indygreg/python-build-standalone/20230826/cpython-3.11.5-20230826-x86_64-unknown-linux-gnu-install_only.tar.gz" dest-dir="imports/thirdparty/python"/>
        <trusted-asset artifact-path="com.github/indygreg/python-build-standalone/20230826/cpython-3.11.5-20230826-aarch64-unknown-linux-gnu-install_only.tar.gz" dest-dir="imports/thirdparty/python"/>
    </inputs>
    <buildcommands>
        <command>
            <program>df</program>
            <args>-hl</args>
        </command>
        <!-- Configure the build (reset, and set up cache parameters from the environment) -->
        <command>
            <program>./build/python.sh</program>
            <args>tools/src/dump_environment/buildcfg.py --reset</args>
        </command>
        <!--
          Gather up environment, so variables that change per build can be
          plumbed through to the tools that need them without breaking the Bazel
          cache. This runs for every mode.
        -->
        <command>
            <program>./build/python.sh</program>
            <args>tools/src/dump_environment/dump_environment.py</args>
        </command>

        <!-- Common build steps -->
        <command>
            <program>bash</program>
            <args>./prepare_inputs.sh</args>
        </command>
        <command>
            <program>bash</program>
            <args>-c 'echo $SOURCE_CODE_BRANCH > build/SOURCE_CODE_BRANCH'</args>
        </command>
        <command>
            <program>bash</program>
            <args>-c 'git rev-parse HEAD > build/COMMIT_HASH'</args>
        </command>
        <command>
            <program>df</program>
            <args>-hl</args>
        </command>

        <!-- Linux Sanity: lsnty -->
        <command mode="san_lsnty">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=sanity_nobuild
                build
                --nobuild
                <!-- TODO LINUXDAR-7977: enable -->
<!--                &#45;&#45;config=black-->
                -- //...
            </args>
        </command>

        <!-- linux_x64_rel: lx64r -->
        <command mode="all_lx64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64r_build
                build
                --config=linux_x64_rel
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_lx64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64r_test
                test
                --config=linux_x64_rel
                --build_tests_only
                --target_pattern_file=build/linuxep_spl_test_targets.txt
            </args>
        </command>
        <command mode="all_lx64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64r
                --exports=build/linuxep_spl_exports.txt
                --config=linux_x64_rel
            </args>
        </command>

        <!-- linux_x64_dbg: lx64d -->
        <command mode="all_lx64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64d_build
                build
                --config=linux_x64_dbg
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_lx64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64d_test
                test
                --config=linux_x64_dbg
                --build_tests_only
                --target_pattern_file=build/linuxep_spl_test_targets.txt
            </args>
        </command>
        <command mode="all_lx64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64d
                --exports=build/linuxep_spl_exports.txt
                --config=linux_x64_dbg
            </args>
        </command>

        <!-- linux_arm64_rel: la64r -->
        <command mode="all_la64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64r_build
                build
                --config=linux_arm64_rel
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_la64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64r
                --exports=build/linuxep_spl_exports.txt
                --config=linux_arm64_rel
            </args>
        </command>

        <!-- linux_arm64_dbg: la64d -->
        <command mode="all_la64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64d_build
                build
                --config=linux_arm64_dbg
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_la64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64d
                --exports=build/linuxep_spl_exports.txt
                --config=linux_arm64_dbg
            </args>
        </command>

<!--        &lt;!&ndash; Coverage build &ndash;&gt;-->
<!--        <command mode="coverage">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;clean &#45;&#45;bullseye &#45;&#45;release</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

<!--        &lt;!&ndash; Static analysis build &ndash;&gt;-->
<!--        <command mode="analysis">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;no-build &#45;&#45;analysis</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

        <command>
            <program>df</program>
            <args>-hl</args>
        </command>
    </buildcommands>
    <publish>
        <workingdir>.</workingdir>

        <logs name="test_logs" source-dir="bazel-testlogs">
            <include glob="**"/>
        </logs>

        <!-- AV -->
        <release-asset artifact-path="av/linux_x64_rel/installer" source-dir=".output/av/linux_x64_rel/installer" manifest-path=".output/av/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="av/linux_x64_rel/installer" source-zip=".output/av/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="av/linux_x64_rel/installer_symbols" source-zip=".output/av/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="av/linux_x64_rel/tap_test_output" source-zip=".output/av/linux_x64_rel/tap_test_output.zip" mode="all_lx64r"/>
        <build-asset artifact-path="av/linux_x64_dbg/installer" source-zip=".output/av/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <build-asset artifact-path="av/linux_x64_dbg/tap_test_output" source-zip=".output/av/linux_x64_dbg/tap_test_output.zip" mode="all_lx64d"/>

        <release-asset artifact-path="av/linux_arm64_rel/installer" source-dir=".output/av/linux_arm64_rel/installer" manifest-path=".output/av/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="av/linux_arm64_rel/installer" source-zip=".output/av/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="av/linux_arm64_rel/installer_symbols" source-zip=".output/av/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="av/linux_arm64_rel/tap_test_output" source-zip=".output/av/linux_arm64_rel/tap_test_output.zip" mode="all_la64r"/>
        <build-asset artifact-path="av/linux_arm64_dbg/installer" source-zip=".output/av/linux_arm64_dbg/installer.zip" mode="all_la64d"/>
        <build-asset artifact-path="av/linux_arm64_dbg/tap_test_output" source-zip=".output/av/linux_arm64_dbg/tap_test_output.zip" mode="all_la64d"/>

        <!-- Base -->
        <release-asset artifact-path="base/linux_x64_rel/installer" source-dir=".output/base/linux_x64_rel/installer" manifest-path=".output/base/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_rel/installer" source-zip=".output/base/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_rel/installer_symbols" source-zip=".output/base/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_dbg/installer" source-zip=".output/base/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <release-asset artifact-path="base/linux_arm64_rel/installer" source-dir=".output/base/linux_arm64_rel/installer" manifest-path=".output/base/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_rel/installer" source-zip=".output/base/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_rel/installer_symbols" source-zip=".output/base/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_dbg/installer" source-zip=".output/base/linux_arm64_dbg/installer.zip" mode="all_la64d"/>
        <build-asset artifact-path="base/fake_management" source-zip=".output/base/fake_management.zip" mode="all_lx64r"/>

        <!-- Response Actions -->
        <release-asset artifact-path="response_actions/linux_x64_rel/installer" source-dir=".output/response_actions/linux_x64_rel/installer" manifest-path=".output/response_actions/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="response_actions/linux_x64_rel/installer" source-zip=".output/response_actions/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="response_actions/linux_x64_rel/installer_symbols" source-zip=".output/response_actions/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="response_actions/linux_x64_dbg/installer" source-zip=".output/response_actions/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <release-asset artifact-path="response_actions/linux_arm64_rel/installer" source-dir=".output/response_actions/linux_arm64_rel/installer" manifest-path=".output/response_actions/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="response_actions/linux_arm64_rel/installer" source-zip=".output/response_actions/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="response_actions/linux_arm64_rel/installer_symbols" source-zip=".output/response_actions/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="response_actions/linux_arm64_dbg/installer" source-zip=".output/response_actions/linux_arm64_dbg/installer.zip" mode="all_la64d"/>

        <!-- EDR -->
        <release-asset artifact-path="edr/linux_x64_rel/installer" source-dir=".output/edr/linux_x64_rel/installer" manifest-path=".output/edr/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="edr/linux_x64_rel/installer" source-zip=".output/edr/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="edr/linux_x64_rel/installer_symbols" source-zip=".output/edr/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="edr/linux_x64_rel/componenttests" source-zip=".output/edr/linux_x64_rel/componenttests.zip" mode="all_lx64r"/>
        <build-asset artifact-path="edr/linux_x64_dbg/installer" source-zip=".output/edr/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <build-asset artifact-path="edr/linux_x64_dbg/componenttests" source-zip=".output/edr/linux_x64_dbg/componenttests.zip" mode="all_lx64d"/>
        <release-asset artifact-path="edr/linux_arm64_rel/installer" source-dir=".output/edr/linux_arm64_rel/installer" manifest-path=".output/edr/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="edr/linux_arm64_rel/installer" source-zip=".output/edr/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="edr/linux_arm64_rel/installer_symbols" source-zip=".output/edr/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="edr/linux_arm64_rel/componenttests" source-zip=".output/edr/linux_arm64_rel/componenttests.zip" mode="all_la64r"/>
        <build-asset artifact-path="edr/linux_arm64_dbg/installer" source-zip=".output/edr/linux_arm64_dbg/installer.zip" mode="all_la64d"/>
        <build-asset artifact-path="edr/linux_arm64_dbg/componenttests" source-zip=".output/edr/linux_arm64_dbg/componenttests.zip" mode="all_la64d"/>

        <!-- Live Response -->
        <release-asset artifact-path="liveterminal/linux_x64_rel/installer" source-dir=".output/liveterminal/linux_x64_rel/installer" manifest-path=".output/liveterminal/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="liveterminal/linux_x64_rel/installer" source-zip=".output/liveterminal/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="liveterminal/linux_x64_rel/installer_symbols" source-zip=".output/liveterminal/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="liveterminal/linux_x64_dbg/installer" source-zip=".output/liveterminal/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <release-asset artifact-path="liveterminal/linux_arm64_rel/installer" source-dir=".output/liveterminal/linux_arm64_rel/installer" manifest-path=".output/liveterminal/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="liveterminal/linux_arm64_rel/installer" source-zip=".output/liveterminal/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="liveterminal/linux_arm64_rel/installer_symbols" source-zip=".output/liveterminal/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="liveterminal/linux_arm64_dbg/installer" source-zip=".output/liveterminal/linux_arm64_dbg/installer.zip" mode="all_la64d"/>

        <!-- Event Journaler -->
        <release-asset artifact-path="eventjournaler/linux_x64_rel/installer" source-dir=".output/eventjournaler/linux_x64_rel/installer" manifest-path=".output/eventjournaler/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_rel/installer" source-zip=".output/eventjournaler/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_rel/installer_symbols" source-zip=".output/eventjournaler/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_rel/manualTools" source-zip=".output/eventjournaler/linux_x64_rel/manualTools.zip" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_dbg/installer" source-zip=".output/eventjournaler/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <build-asset artifact-path="eventjournaler/linux_x64_dbg/manualTools" source-zip=".output/eventjournaler/linux_x64_dbg/manualTools.zip" mode="all_lx64d"/>
        <release-asset artifact-path="eventjournaler/linux_arm64_rel/installer" source-dir=".output/eventjournaler/linux_arm64_rel/installer" manifest-path=".output/eventjournaler/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_rel/installer" source-zip=".output/eventjournaler/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_rel/installer_symbols" source-zip=".output/eventjournaler/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_rel/manualTools" source-zip=".output/eventjournaler/linux_arm64_rel/manualTools.zip" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_dbg/installer" source-zip=".output/eventjournaler/linux_arm64_dbg/installer.zip" mode="all_la64d"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_dbg/manualTools" source-zip=".output/eventjournaler/linux_arm64_dbg/manualTools.zip" mode="all_la64d"/>

        <!-- Device Isolation -->
        <release-asset artifact-path="deviceisolation/linux_x64_rel/installer" source-dir=".output/deviceisolation/linux_x64_rel/installer" manifest-path=".output/deviceisolation/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="deviceisolation/linux_x64_rel/installer" source-zip=".output/deviceisolation/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="deviceisolation/linux_x64_rel/installer_symbols" source-zip=".output/deviceisolation/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="deviceisolation/linux_x64_dbg/installer" source-zip=".output/deviceisolation/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <release-asset artifact-path="deviceisolation/linux_arm64_rel/installer" source-dir=".output/deviceisolation/linux_arm64_rel/installer" manifest-path=".output/deviceisolation/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="deviceisolation/linux_arm64_rel/installer" source-zip=".output/deviceisolation/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="deviceisolation/linux_arm64_rel/installer_symbols" source-zip=".output/deviceisolation/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="deviceisolation/linux_arm64_dbg/installer" source-zip=".output/deviceisolation/linux_arm64_dbg/installer.zip" mode="all_la64d"/>

        <!-- System Product Test Output -->
        <build-asset artifact-path="base/linux_x64_rel/system_test" source-zip=".output/base/linux_x64_rel/system_test.zip" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_dbg/system_test" source-zip=".output/base/linux_x64_dbg/system_test.zip" mode="all_lx64d"/>
        <build-asset artifact-path="base/linux_arm64_rel/system_test" source-zip=".output/base/linux_arm64_rel/system_test.zip" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_dbg/system_test" source-zip=".output/base/linux_arm64_dbg/system_test.zip" mode="all_la64d"/>

        <!-- ThinInstaller Output -->
        <release-asset artifact-path="thininstaller/thininstaller" source-dir=".output/thininstaller/thininstaller" manifest-path=".output/thininstaller/thininstaller.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="thininstaller/thininstaller" source-zip=".output/thininstaller/thininstaller.zip" mode="all_lx64r"/>

        <!-- SBOM -->
        <build-asset artifact-path="products/linux_x64_rel/sbom" source-zip=".output/products/linux_x64_rel/sbom.zip" mode="all_lx64r"/>
        <build-asset artifact-path="products/linux_x64_dbg/sbom" source-zip=".output/products/linux_x64_dbg/sbom.zip" mode="all_lx64d"/>
        <build-asset artifact-path="products/linux_arm64_rel/sbom" source-zip=".output/products/linux_arm64_rel/sbom.zip" mode="all_la64r"/>
        <build-asset artifact-path="products/linux_arm64_dbg/sbom" source-zip=".output/products/linux_arm64_dbg/sbom.zip" mode="all_la64d"/>

<!--        <build-asset artifact-path="sspl-base/pluginapi" source-dir="output" mode="release">-->
<!--            <include glob="pluginapi.tar.gz"/>-->
<!--        </build-asset>-->

        <!-- coverage(bullseye) -->
<!--        <build-asset artifact-path="sspl-base-coverage/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/RA-SDDS-COMPONENT" source-dir="output/RA-SDDS-COMPONENT" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/RA-SDDS3-PACKAGE" source-dir="output/RA-SDDS3-PACKAGE" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/openssl" source-dir="/build/redist/openssl" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/pluginapi" source-dir="output" mode="coverage">-->
<!--            <include glob="pluginapi.tar.gz"/>-->
<!--        </build-asset>-->
<!--        <build-asset artifact-path="sspl-base-coverage/mcs" source-dir="output" mode="coverage">-->
<!--            <include glob="mcs.tar.gz"/>-->
<!--        </build-asset>-->
<!--        <build-asset artifact-path="sspl-base-coverage/system_test" source-dir="output" mode="coverage">-->
<!--            <include glob="SystemProductTestOutput.tar.gz"/>-->
<!--            <include glob="symbols"/>-->
<!--        </build-asset>-->
<!--        <build-asset artifact-path="sspl-base-coverage/build_log" source-dir="log" mode="coverage"/>-->

<!--        <build-asset artifact-path="sspl-base-coverage/unittest-htmlreport" source-dir="output/coverage/sspl-base-unittest" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/covfile" source-dir="output/" mode="coverage">-->
<!--            <include glob="./*.cov"/>-->
<!--        </build-asset>-->

        <!-- Analysis -->
<!--        <build-asset artifact-path="sspl-base/analysis" source-dir="output/analysis" mode="analysis"/>-->
<!--        <build-asset artifact-path="sspl-base/analysis_build_log" source-dir="log" mode="analysis"/>-->

        <!-- linux_x64_dbg: lx64d -->
<!--        <build-asset artifact-path="sspl-base-debug/pluginapi" source-dir="output" mode="debug">-->
<!--            <include glob="pluginapi.tar.gz"/>-->
<!--        </build-asset>-->

        <publishbranches>master,feature,release,develop,bugfix,debug</publishbranches>
    </publish>
</package>
