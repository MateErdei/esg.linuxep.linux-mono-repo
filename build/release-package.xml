<?xml version='1.0' encoding='utf-8'?>
<package name="linux-mono-repo" version="1.0.0">
    <inputs>
        <workingdir>.</workingdir>

        <build-asset project="em" repo="esg">
            <release-version branch="release/SPRINT-2023.40" build-id="20231002094530-65dfcfc380bfc7fb5e0d2ce92e7663276ec7e31c-DShMup"/>
            <development-version branch="develop"/>
            <include artifact-path="sophlib/BUILD" dest-dir="common/sophlib"/>
            <include artifact-path="sophlib/include" dest-dir="common/sophlib/include/sophlib"/>
            <include artifact-path="sophlib/linux_x64_rel/lib" dest-dir="common/sophlib/linux_x64_release/lib"/>
            <include artifact-path="sophlib/linux_arm64_rel/lib" dest-dir="common/sophlib/linux_arm64_release/lib"/>
            <include artifact-path="sophlib/linux_x64_rel/sdds3_tools" dest-dir="imports/internal/sdds3_utils"/>
            <include artifact-path="bazel-tools" dest-dir="."/>
            <include artifact-path="common/journal/linux_x64_rel/libs" dest-dir="common/journal/linux_x64_release"/>
            <include artifact-path="common/journal/linux_x64_rel/tools" dest-dir="common/journal/linux_x64_release"/>
        </build-asset>

        <trusted-asset artifact-path="com.nlohmann/json/3.11.2/nlohmann-json-include" dest-dir="imports/thirdparty/nlohmann-json"/>
        <trusted-asset artifact-path="filer5-migrate/pscerts/1-0-1/67228/ps_certificates/ps_rootca.crt" dest-dir="thininstaller/certs"/>
        <trusted-asset artifact-path="com.github/indygreg/python-build-standalone/20230826/cpython-3.11.5-20230826-x86_64-unknown-linux-gnu-install_only.tar.gz" dest-dir="imports/thirdparty/python"/>
        <trusted-asset artifact-path="com.github/indygreg/python-build-standalone/20230826/cpython-3.11.5-20230826-aarch64-unknown-linux-gnu-install_only.tar.gz" dest-dir="imports/thirdparty/python"/>
    </inputs>
    <buildcommands>
        <!-- Configure the build (reset, and set up cache parameters from the environment) -->
        <command>
            <program>./build/python.sh</program>
            <args>tools/src/dump_environment/buildcfg.py --reset</args>
        </command>
        <!--
          Gather up environment, so variables that change per build can be
          plumbed through to the tools that need them without breaking the Bazel
          cache. This runs for every mode.
        -->
        <command>
            <program>./build/python.sh</program>
            <args>tools/src/dump_environment/dump_environment.py</args>
        </command>

        <!-- Common build steps -->
        <command>
            <program>bash</program>
            <args>./prepare_inputs.sh</args>
        </command>
        <command>
            <program>bash</program>
            <args>-c 'echo $SOURCE_CODE_BRANCH > build/SOURCE_CODE_BRANCH'</args>
        </command>
        <command>
            <program>bash</program>
            <args>-c 'git rev-parse HEAD > build/COMMIT_HASH'</args>
        </command>

        <!-- Linux Sanity: lsnty -->
        <command mode="san_lsnty">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=sanity_nobuild
                build
                --nobuild
                <!-- TODO LINUXDAR-7977: enable -->
<!--                &#45;&#45;config=black-->
                -- //...
            </args>
        </command>

        <!-- linux_x64_rel: lx64r -->
        <command mode="all_lx64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64r_build
                build
                --config=linux_x64_rel
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_lx64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64r_test
                test
                --config=linux_x64_rel
                --build_tests_only
                --target_pattern_file=build/linuxep_spl_test_targets.txt
            </args>
        </command>
        <command mode="all_lx64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64r
                --exports=build/linuxep_spl_exports.txt
                --config=linux_x64_rel
            </args>
        </command>

        <!-- linux_x64_dbg: lx64d -->
        <command mode="all_lx64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64d_build
                build
                --config=linux_x64_dbg
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_lx64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64d_test
                test
                --config=linux_x64_dbg
                --build_tests_only
                --target_pattern_file=build/linuxep_spl_test_targets.txt
            </args>
        </command>
        <command mode="all_lx64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64d
                --exports=build/linuxep_spl_exports.txt
                --config=linux_x64_dbg
            </args>
        </command>

        <!-- linux_arm64_rel: la64r -->
        <command mode="all_la64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64r_build
                build
                --config=linux_arm64_rel
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_la64r">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64r
                --exports=build/linuxep_spl_exports.txt
                --config=linux_arm64_rel
            </args>
        </command>

        <!-- linux_arm64_dbg: la64d -->
        <command mode="all_la64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/bazel/run.py
                --profile=linuxep_spl_lx64d_build
                build
                --config=linux_arm64_dbg
                --target_pattern_file=build/linuxep_spl_build_targets.txt
            </args>
        </command>
        <command mode="all_la64d">
            <program>./build/python.sh</program>
            <args>
                tools/src/export_artifacts/export_targets.py
                --mode=all_lx64d
                --exports=build/linuxep_spl_exports.txt
                --config=linux_arm64_dbg
            </args>
        </command>

<!--        &lt;!&ndash; Coverage build &ndash;&gt;-->
<!--        <command mode="coverage">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;clean &#45;&#45;bullseye &#45;&#45;release</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

<!--        &lt;!&ndash; Static analysis build &ndash;&gt;-->
<!--        <command mode="analysis">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;no-build &#45;&#45;analysis</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->
    </buildcommands>
    <publish>
        <workingdir>.</workingdir>

        <logs name="test_logs" source-dir="bazel-testlogs">
            <include glob="**"/>
        </logs>

        <!-- Base -->
        <release-asset artifact-path="base/linux_x64_rel/installer" source-dir=".output/base/linux_x64_rel/installer" manifest-path=".output/base/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_rel/installer" source-zip=".output/base/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_rel/installer_symbols" source-zip=".output/base/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_x64_dbg/installer" source-zip=".output/base/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <release-asset artifact-path="base/linux_arm64_rel/installer" source-dir=".output/base/linux_arm64_rel/installer" manifest-path=".output/base/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_rel/installer" source-zip=".output/base/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_rel/installer_symbols" source-zip=".output/base/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="base/linux_arm64_dbg/installer" source-zip=".output/base/linux_arm64_dbg/installer.zip" mode="all_lx64d"/>
        <build-asset artifact-path="base/fake_management" source-zip=".output/base/fake_management.zip" mode="all_lx64r"/>

        <!-- Response Actions -->
        <release-asset artifact-path="response_actions/linux_x64_rel/installer" source-dir=".output/response_actions/linux_x64_rel/installer" manifest-path=".output/response_actions/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="response_actions/linux_x64_rel/installer" source-zip=".output/response_actions/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="response_actions/linux_x64_rel/installer_symbols" source-zip=".output/response_actions/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="response_actions/linux_x64_dbg/installer" source-zip=".output/response_actions/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <release-asset artifact-path="response_actions/linux_arm64_rel/installer" source-dir=".output/response_actions/linux_arm64_rel/installer" manifest-path=".output/response_actions/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="response_actions/linux_arm64_rel/installer" source-zip=".output/response_actions/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="response_actions/linux_arm64_rel/installer_symbols" source-zip=".output/response_actions/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="response_actions/linux_arm64_dbg/installer" source-zip=".output/response_actions/linux_arm64_dbg/installer.zip" mode="all_lx64d"/>

        <!-- Event Journaler -->
        <release-asset artifact-path="eventjournaler/linux_x64_rel/installer" source-dir=".output/eventjournaler/linux_x64_rel/installer" manifest-path=".output/eventjournaler/linux_x64_rel/installer.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_rel/installer" source-zip=".output/eventjournaler/linux_x64_rel/installer.zip" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_rel/installer_symbols" source-zip=".output/eventjournaler/linux_x64_rel/installer_symbols.zip" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_rel/manualTools" source-zip=".output/eventjournaler/linux_x64_rel/manualTools.zip" mode="all_lx64r"/>
        <build-asset artifact-path="eventjournaler/linux_x64_dbg/installer" source-zip=".output/eventjournaler/linux_x64_dbg/installer.zip" mode="all_lx64d"/>
        <build-asset artifact-path="eventjournaler/linux_x64_dbg/manualTools" source-zip=".output/eventjournaler/linux_x64_dbg/manualTools.zip" mode="all_lx64d"/>
        <release-asset artifact-path="eventjournaler/linux_arm64_rel/installer" source-dir=".output/eventjournaler/linux_arm64_rel/installer" manifest-path=".output/eventjournaler/linux_arm64_rel/installer.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_rel/installer" source-zip=".output/eventjournaler/linux_arm64_rel/installer.zip" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_rel/installer_symbols" source-zip=".output/eventjournaler/linux_arm64_rel/installer_symbols.zip" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_rel/manualTools" source-zip=".output/eventjournaler/linux_arm64_rel/manualTools.zip" mode="all_la64r"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_dbg/installer" source-zip=".output/eventjournaler/linux_arm64_dbg/installer.zip" mode="all_lx64d"/>
        <build-asset artifact-path="eventjournaler/linux_arm64_dbg/manualTools" source-zip=".output/eventjournaler/linux_arm64_dbg/manualTools.zip" mode="all_lx64d"/>

        <!-- System Product Test Output -->
        <build-asset artifact-path="base/linux_x64_rel/system_test" source-zip=".output/base/linux_x64_rel/system_test.zip" mode="all_lx64r"/>
        <build-asset artifact-path="base/linux_arm64_rel/system_test" source-zip=".output/base/linux_arm64_rel/system_test.zip" mode="all_la64r"/>

        <!-- ThinInstaller Output -->
        <release-asset artifact-path="thininstaller/linux_x64_rel/thininstaller" source-dir=".output/thininstaller/linux_x64_rel/thininstaller" manifest-path=".output/thininstaller/linux_x64_rel/thininstaller.manifest.json" mode="all_lx64r"/>
        <build-asset artifact-path="thininstaller/linux_x64_rel/thininstaller" source-zip=".output/thininstaller/linux_x64_rel/thininstaller.zip" mode="all_lx64r"/>
        <release-asset artifact-path="thininstaller/linux_arm64_rel/thininstaller" source-dir=".output/thininstaller/linux_arm64_rel/thininstaller" manifest-path=".output/thininstaller/linux_arm64_rel/thininstaller.manifest.json" mode="all_la64r"/>
        <build-asset artifact-path="thininstaller/linux_arm64_rel/thininstaller" source-zip=".output/thininstaller/linux_arm64_rel/thininstaller.zip" mode="all_la64r"/>

<!--        <build-asset artifact-path="sspl-base/pluginapi" source-dir="output" mode="release">-->
<!--            <include glob="pluginapi.tar.gz"/>-->
<!--        </build-asset>-->

        <!-- coverage(bullseye) -->
<!--        <build-asset artifact-path="sspl-base-coverage/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/RA-SDDS-COMPONENT" source-dir="output/RA-SDDS-COMPONENT" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/RA-SDDS3-PACKAGE" source-dir="output/RA-SDDS3-PACKAGE" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/openssl" source-dir="/build/redist/openssl" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/pluginapi" source-dir="output" mode="coverage">-->
<!--            <include glob="pluginapi.tar.gz"/>-->
<!--        </build-asset>-->
<!--        <build-asset artifact-path="sspl-base-coverage/mcs" source-dir="output" mode="coverage">-->
<!--            <include glob="mcs.tar.gz"/>-->
<!--        </build-asset>-->
<!--        <build-asset artifact-path="sspl-base-coverage/system_test" source-dir="output" mode="coverage">-->
<!--            <include glob="SystemProductTestOutput.tar.gz"/>-->
<!--            <include glob="symbols"/>-->
<!--        </build-asset>-->
<!--        <build-asset artifact-path="sspl-base-coverage/build_log" source-dir="log" mode="coverage"/>-->

<!--        <build-asset artifact-path="sspl-base-coverage/unittest-htmlreport" source-dir="output/coverage/sspl-base-unittest" mode="coverage"/>-->
<!--        <build-asset artifact-path="sspl-base-coverage/covfile" source-dir="output/" mode="coverage">-->
<!--            <include glob="./*.cov"/>-->
<!--        </build-asset>-->

        <!-- Analysis -->
<!--        <build-asset artifact-path="sspl-base/analysis" source-dir="output/analysis" mode="analysis"/>-->
<!--        <build-asset artifact-path="sspl-base/analysis_build_log" source-dir="log" mode="analysis"/>-->

        <!-- linux_x64_dbg: lx64d -->
<!--        <build-asset artifact-path="sspl-base-debug/pluginapi" source-dir="output" mode="debug">-->
<!--            <include glob="pluginapi.tar.gz"/>-->
<!--        </build-asset>-->

        <publishbranches>master,feature,release,develop,bugfix,debug</publishbranches>
    </publish>
</package>
