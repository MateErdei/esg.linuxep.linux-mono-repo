<?xml version="1.0" encoding="utf-8"?>
<package
  name="sspl-warehouse"
  version="1.0.0">

  <!-- Components are fetched directly by the warehouse generation scripts according to the specs in the
         warehouse definition file. These inputs are the tools that are needed and a couple of oddball
         components.

         All modes:
            dev
            prod
            999
    -->

    <inputs>
      <workingdir>.</workingdir>

      <build-asset project="linuxep" repo="linux-mono-repo" mode="dev,999">
          <development-version branch="develop"/>
          <!-- Base -->
          <include artifact-path="base/linux_x64_rel/installer" dest-dir="redist/base/latest/x64" mode="dev,999"/>
          <include artifact-path="response_actions/linux_x64_rel/installer" dest-dir="redist/responseactions/latest/x64" mode="dev,999"/>
          <include artifact-path="base/linux_x64_rel/system_test" dest-dir="."/>
          <!-- EDR -->
          <include artifact-path="edr/SDDS-COMPONENT" dest-dir="redist/edr/latest/x64" mode="dev,999"/>
          <!-- Event Journaler -->
          <include artifact-path="eventjournaler/linux_x64_rel/installer" dest-dir="redist/event-journaler/latest/x64" mode="dev,999"/>
          <!-- AV -->
          <include artifact-path="sspl-plugin-anti-virus/SDDS-COMPONENT" dest-dir="redist/av/latest/x64" mode="dev,999"/>
          <include artifact-path="liveterminal/sdds" dest-dir="redist/liveresponse/latest/x64" mode="dev,999"/>
      </build-asset>

      <build-asset project="linuxep" repo="runtimedetections" mode="dev,999">
        <development-version branch="develop"/>
          <include artifact-path="SDDS-COMPONENT" dest-dir="redist/runtimedetections/latest/x64" mode="dev,999"/>
      </build-asset>
      
      <build-asset project="linuxep" repo="sspl-plugin-heartbeat" mode="dev,999">
        <development-version branch="develop"/>
          <include artifact-path="sspl-plugin-heartbeat/SDDS-COMPONENT" dest-dir="redist/heartbeat/latest/x64" mode="dev,999"/>
      </build-asset>

        <!--supplements-->
        <build-asset project="linuxep" repo="runtimedetections" mode="dev,999,prod">
            <release-version branch="release--content--version_5_5_3" build-id="20230825105748-dfad2a8362d61166ae5afc6dcd04f540438d42ea-Sdfm6q"/>
            <include artifact-path="sspl-rdrules-scit" dest-dir="inputs/supplements/RuntimeDetectionRules"/>
        </build-asset>
      <build-asset project="em" repo="esg" >
          <release-version branch="release/scheduled_query_pack/1.13" build-id="20220824140550-05ec7c0da54e978fa40839ee052374983a4a057a-JbkaIM"/>
          <development-version branch="develop" />
          <include artifact-path="scheduled-query-pack-scit" dest-dir="inputs/supplements/scheduled-query-pack" mode="dev,prod,999"/>
      </build-asset>
        <build-asset project="linuxep" repo="sspl-flags">
            <release-version branch="release/2023-3" build-id="20230802152311-860bd9405bde618713d2510f6e9c0e9439f0e2c5-ONEUWD"/>
            <development-version branch="develop" />
            <include artifact-path="sspl-flags/scit-supplement" dest-dir="inputs/supplements/sspl-flags" mode="dev,999,prod"/>
        </build-asset>

        <build-asset project="em" repo="esg">
            <release-version branch="release/SPRINT-2023.37-linux"
                             build-id="20230908150721-2a0223e80f68f92a13cf494ec53ad2f70eb6d01e-jQCcwz"/>
            <development-version branch="develop"/>
            <include artifact-path="bazel-tools" dest-dir="."/>
            <include artifact-path="sophlib/BUILD" dest-dir="common/sophlib"/>
            <include artifact-path="sophlib/include" dest-dir="common/sophlib/include/sophlib"/>
            <include artifact-path="sophlib/linux_x64_rel/lib" dest-dir="common/sophlib/linux_x64_release/lib"/>
            <include artifact-path="sophlib/linux_x64_rel/sdds3_tools" dest-dir="imports/internal/sdds3_utils"/>
        </build-asset>

        <!-- gcc -->
        <build-asset project="thirdparty" repo="gcc">
            <release-version branch="release/Version_11_2_0" build-id="20220310091547-cf8f7ca9572a3bc9a68f05138086815341a49224-cZ84iF"/>
            <include artifact-path="output" dest-dir="redist/gcc" mode="dev,999,prod"/>
        </build-asset>
    </inputs>

    <buildcommands>
        <!-- Clear the output directory for the packages/suites, so that old ones are not left around, which can cause
            problems with tests -->
        <command mode="dev,999,prod">
            <program>rm</program>
            <args>-rf bazel-bin/sdds3</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999,prod">
            <program>python3</program>
            <args>makesuites.py</args>
            <workingdir>./linuxep_suites</workingdir>
        </command>
        <command mode="dev,999,prod">
            <program>/bin/bash</program>
            <args>./fixup_bazel_tools.sh</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999,prod">
            <program>python3</program>
            <args>-u tools/src/dump_environment/dump_environment.py</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999,prod">
            <program>mv</program>
            <args>tools/environment.json imports/environment.json</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev">
            <program>python3</program>
            <args>-u sdds3/tools/gen_bazel.py --mode dev</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="999">
            <program>python3</program>
            <args>-u sdds3/tools/gen_bazel.py --mode 999</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="prod">
            <program>python3</program>
            <args>-u sdds3/tools/gen_bazel.py --mode prod</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999,prod">
            <program>bazel</program>
            <args>build //sdds3/... --verbose_failures --spawn_strategy=standalone --distdir /opt/distdir</args>
            <workingdir>.</workingdir>
        </command>
        <!-- Extracting SystemProductTestOutput for use in tests -->
        <command mode="dev,999">
            <program>rm</program>
            <args>-rf TA/libs TA/SupportFiles</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999">
            <program>tar</program>
            <args>-xf SystemProductTestOutput.tar.gz</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999">
            <program>cp</program>
            <args>-r libs SupportFiles ../../TA/</args>
            <workingdir>SystemProductTestOutput/testUtils</workingdir>
        </command>
        <command mode="dev,999">
            <program>rsync</program>
            <args>-avh SystemProductTestOutput/libs/ TA/libs/</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999">
            <program>mkdir -p</program>
            <args>TA/SupportFiles/openssl</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="dev,999">
            <program>cp</program>
            <args>-f libcrypto.so.3 libssl.so.3 openssl ../TA/SupportFiles/openssl</args>
            <workingdir>SystemProductTestOutput</workingdir>
        </command>
        <command mode="dev,999">
            <program>rm</program>
            <args>-rf SystemProductTestOutput</args>
            <workingdir>.</workingdir>
        </command>
    </buildcommands>

  <publish>
      <!--sdds3-->
      <build-asset artifact-path="test-scripts" source-dir="TA" mode="dev"/>
      <!--dev version-->
      <build-asset artifact-path="sdds3-repo" source-dir="bazel-bin/sdds3" mode="dev">
          <include glob="package/**"/>
          <include glob="suite/**"/>
          <include glob="supplement/**"/>
      </build-asset>
      <release-asset artifact-path="sdds3-launchdarkly" source-dir="output/launchdarkly" mode="dev">
          <include glob="*.json"/>
      </release-asset>
      <!--999 version-->
      <build-asset artifact-path="sdds3-repo-999" source-dir="bazel-bin/sdds3" mode="999">
          <include glob="package/**"/>
          <include glob="suite/**"/>
          <include glob="supplement/**"/>
      </build-asset>
      <release-asset artifact-path="sdds3-launchdarkly-999" source-dir="output/launchdarkly" mode="999">
          <include glob="*.json"/>
      </release-asset>
      <!--prod version-->
      <release-asset artifact-path="prod-sdds3-repo" source-dir="bazel-bin/sdds3" mode="prod">
          <include glob="package/**"/>
          <include glob="suite/**"/>
      </release-asset>
      <release-asset artifact-path="prod-sdds3-launchdarkly" source-dir="output/launchdarkly" mode="prod">
          <include glob="*.json"/>
      </release-asset>
      <release-asset artifact-path="prod-sdds3-static-suites" source-dir="output/prod-sdds3-static-suites" mode="prod,dev">
          <include glob="*.json"/>
      </release-asset>
      <release-asset artifact-path="prod-sdds3-static-suites-999" source-dir="output/prod-sdds3-static-suites" mode="999">
          <include glob="*.json"/>
      </release-asset>
  </publish>

</package>
