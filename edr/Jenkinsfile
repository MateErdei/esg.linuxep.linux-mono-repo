
library "standardPipeline"

project = 'sspl-edr-plugin'
version_key = '1.0.2'
project_gitrepo = 'ssh://git@stash.sophos.net:7999/linuxep/sspl-plugin-edr-component.git'
project_builddir = 'sspl-edr-plugin-build'
project_release_xml = 'build-files/release-package.xml'
buildAgentTemplate = 'JenkinsLinuxTemplate1'

properties([
  parameters([
    string(name: 'CommitHash', defaultValue: ''),
    string(name: 'PortalId', defaultValue: ''),
    string(name: 'PortalAddress', defaultValue: ''),
    string(name: 'Mode', defaultValue: 'release')
  ])
])

skipDefaultCheckout()
try{
	version_number = GetVersionNumber(version_key, project)
    PreBuild(params.CommitHash, params.PortalId, params.PortalAddress)

    git_branch = "${env.BRANCH_NAME}"
    if (git_branch == 'master')
    {
        echo 'Starting edr master branch builds'
        parallel Build:
        {
            ArtisanBuild(
                params.CommitHash,
                params.PortalId,
                buildAgentTemplate,
                project_release_xml,
                params.Mode,
                version_number,
                project_builddir)

            SuccessfulBuild(
                params.CommitHash,
                params.PortalId,
                params.PortalAddress,
                'master',
                project_gitrepo,
                git_branch,
                project_release_xml)
        },
        coverage_build:
        {
            ArtisanBuild(
                params.CommitHash,
                params.PortalId,
                buildAgentTemplate,
                project_release_xml,
                'coverage',
                version_number,
                project_builddir,
                )
        }
    }
    else if (git_branch.endsWith('coverage-build'))
    {
        echo 'Starting bullseye coverage build'
        ArtisanBuild(buildAgentTemplate, project_release_xml, 'coverage', version_number, project_builddir)
    }
    else
    {
        echo 'Starting ticket branch edr build'
        ArtisanBuild(buildAgentTemplate, project_release_xml, params.Mode, version_number, project_builddir)
        SuccessfulBuild(project_release_xml)
    }

} catch(e){
    FailedBuild(params.CommitHash, params.PortalId, params.PortalAddress)
    error("Build failed: " + e.toString())
}
