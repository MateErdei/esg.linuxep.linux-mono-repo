#!/usr/bin/env bash

# Copyright 2020 Sophos Limited.  All rights reserved.

# Find the location of where the script is running from
# Allows the script to be called from anywhere either directly or via symlink

PLUGIN_NAME=@PLUGIN_NAME@
PRODUCT_LINE_ID="@PRODUCT_LINE_ID@"
SCRIPT_LOCATION="${BASH_SOURCE[0]}"

# if file is symbolic link
if [ -h "$SCRIPT_LOCATION" ]
then
  SCRIPT_DIR="$( cd -P "$( dirname "$SCRIPT_LOCATION" )" >/dev/null && pwd )"
  SCRIPT_LOCATION="$(readlink "$SCRIPT_LOCATION")"  # get location of linked file

  [[ $SCRIPT_LOCATION != /* ]] && SCRIPT_LOCATION="$SCRIPT_DIR/$SCRIPT_LOCATION"
fi

SCRIPT_DIR="$( cd -P "$( dirname "$SCRIPT_LOCATION" )" >/dev/null && pwd )"

BASEDIR="${SCRIPT_DIR%%/plugins/${PLUGIN_NAME}/bin}"
DOWNGRADE=0
FORCE=0
while [[ $# -ge 1 ]]
do
    case $1 in
        --force)
            FORCE=1
            ;;
        --downgrade)
            DOWNGRADE=1
            ;;
    esac
    shift
done
UNINSTALLDIR="$BASEDIR/plugins/${PLUGIN_NAME}"
SYMLINK="$BASEDIR/base/update/var/installedproducts/${PRODUCT_LINE_ID}.sh"

"${BASEDIR}/bin/wdctl" removePluginRegistration "${PLUGIN_NAME}"
CONFIG_FILE="${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc/plugin.conf"
if (( $DOWNGRADE == 0 ))
then
  if [[ -f $CONFIG_FILE ]]
  then
    cp $CONFIG ${SOPHOS_INSTALL}/tmp
  fi
fi

rm -rf "$UNINSTALLDIR"
rm -r "$SYMLINK"
rm -f ${BASEDIR}/var/ipc/plugins/${PLUGIN_NAME}.ipc

if (( $DOWNGRADE == 0 ))
then
  if [[ -f ${SOPHOS_INSTALL}/tmp/plugin.conf ]]
  then
    mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc
    mv ${SOPHOS_INSTALL}/tmp/plugin.conf ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc
  fi
fi

STATUS_XML=${BASEDIR}/base/mcs/status/LiveQuery_status.xml
[ -f ${STATUS_XML} ] && rm -f ${STATUS_XML}
CACHED_STATUS_XML=${BASEDIR}/base/mcs/status/cache/LiveQuery.xml
[ -f ${CACHED_STATUS_XML} ] && rm -f ${CACHED_STATUS_XML}

# Check for any OSQuery processes running and attempt to kill them
OSQUERY_PATH=${BASEDIR}/plugins/edr/osquery/bin/osquery
for i in {0..2}
do
  PROCESS=$(pgrep -f ${OSQUERY_PATH})
  if [[ -z ${PROCESS} ]]
  then
    break
  else
    kill ${PROCESS}
    sleep 1
  fi
done
pgrep -f ${OSQUERY_PATH} | xargs -i echo "Could not kill OSQuery process after 3 attempts: {}"

# check that everything has been uninstalled correctly
function failure
{
    >&2 echo $1
    exit 1
}
[ ! -f ${CACHED_STATUS_XML} ] &&  [ ! -f  ${STATUS_XML} ]  &&  [ ! -d ${UNINSTALLDIR} ] || failure "Failed to remove ${PLUGIN_NAME} related files."