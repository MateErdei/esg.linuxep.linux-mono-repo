#!/usr/bin/env bash

# Copyright 2021 Sophos Limited.  All rights reserved.

PLUGIN_NAME=@PLUGIN_NAME@
PRODUCT_LINE_ID="@PRODUCT_LINE_ID@"

EXIT_FAIL_CREATE_DIRECTORY=10
EXIT_FAIL_FIND_GROUPADD=11
EXIT_FAIL_ADD_GROUP=12
EXIT_FAIL_FIND_USERADD=13
EXIT_FAIL_ADDUSER=14
EXIT_FAIL_FIND_GETENT=15
EXIT_FAIL_WDCTL_FAILED_TO_COPY=16
EXIT_FAIL_WDCTL_FAILED_TO_START=17
EXIT_FAIL_VERSIONEDCOPY=20
EXIT_FAIL_SERVICE=40

STARTINGDIR=$(pwd)
SCRIPTDIR=${0%/*}
if [[ "$SCRIPTDIR" == "$0" ]]
then
    SCRIPTDIR=${STARTINGDIR}
fi

ABS_SCRIPTDIR=$(cd $SCRIPTDIR && pwd)

source ${ABS_SCRIPTDIR}/cleanupinstall.sh

[[ -n "$SOPHOS_INSTALL" ]] || SOPHOS_INSTALL=/opt/sophos-spl
[[ -n "$DIST" ]] || DIST=$ABS_SCRIPTDIR

failure()
{
    local CODE=$1
    shift
    echo "$@" >&2
    exit $CODE
}
export DIST
export SOPHOS_INSTALL
export LD_LIBRARY_PATH="$SOPHOS_INSTALL/base/lib64"

USER_NAME=root
GROUP_NAME=root

function is_already_installed()
{
    [[ -f "$SOPHOS_INSTALL/plugins/${PLUGIN_NAME}/bin/edr" ]]
}

# During upgrades we purge the osquery database when upgrading to 1.1.2 or newer as a work around for LINUXDAR-3073
function purge_osquery_db_if_required()
{
    if is_installed_version_before 1.1.2
    then
        if [[  -d  "${SOPHOS_INSTALL}/plugins/edr/var/osquery.db" ]]
        then
              rm -f "${SOPHOS_INSTALL}/plugins/edr/var/osquery.db/"*
        fi
    fi
}

is_installed_version_before()
{
    INSTALLED_VERSION=$(grep PRODUCT_VERSION "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/VERSION.ini" | awk '{print $NF}')
    COMPARE_VERSION=$1
    IFS='.' read -r INSTALLED_VERSION_1 INSTALLED_VERSION_2 INSTALLED_VERSION_3 INSTALLED_VERSION_4 << EOM
$INSTALLED_VERSION
EOM
    IFS='.' read -r COMPARE_VERSION_1 COMPARE_VERSION_2 COMPARE_VERSION_3 << EOM
$COMPARE_VERSION
EOM
    if [ $INSTALLED_VERSION_1 -eq $COMPARE_VERSION_1 ] ; then
        if [ $INSTALLED_VERSION_2 -eq $COMPARE_VERSION_2 ] ; then
            if [ $INSTALLED_VERSION_3 -lt $COMPARE_VERSION_3 ] ; then
                return 0
            else
              return 1
            fi
        elif [ $INSTALLED_VERSION_2 -lt $COMPARE_VERSION_2 ] ; then
            return 0
        else
            return 1
        fi
    elif [ $INSTALLED_VERSION_1 -lt $COMPARE_VERSION_1 ] ; then
        return 0
    else
        return 1
    fi
}


[[ -d $SOPHOS_INSTALL ]] || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to find installation directory: $SOPHOS_INSTALL"

# In case this is an upgrade (not a clean install) request the watchdog stops the plugin
if is_already_installed
then
    "${SOPHOS_INSTALL}/bin/wdctl" stop "${PLUGIN_NAME}" &>/dev/null || echo Failed to stop plugin: ${PLUGIN_NAME}
    purge_osquery_db_if_required
fi

#Create plugin registration file
TEMP_REG_FILE=${SOPHOS_INSTALL}/tmp/${PLUGIN_NAME}.json
sed "s;SOPHOS_INSTALL_VALUE;${SOPHOS_INSTALL};g" "${DIST}/files/base/pluginRegistry/${PLUGIN_NAME}.json" >  "${TEMP_REG_FILE}"
"${SOPHOS_INSTALL}/bin/wdctl" copyPluginRegistration "${TEMP_REG_FILE}" || failure ${EXIT_FAIL_WDCTL_FAILED_TO_COPY} "Failed to copy registration ${TEMP_REG_FILE}"
rm -f ${TEMP_REG_FILE}

#Install files
find "$DIST/files/plugins" -type f -print0 | xargs -0 "$SOPHOS_INSTALL/base/bin/versionedcopy"  || failure ${EXIT_FAIL_VERSIONEDCOPY} "Failed to copy files to installation"

generate_manifest_diff $DIST ${PRODUCT_LINE_ID}

mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr etc dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc/osquery.conf.d || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr osquery.conf.d dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc/query_packs || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr query_packs dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/var || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr var dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/log || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr log dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/extensions  || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr extensions dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/var/jrl || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create edr jrl dir"


chmod 0750 "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/bin/"*
chmod 0700 -R ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc/osquery.conf.d
chmod 0700 -R ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc/query_packs
chmod 0700 -R ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/var
chmod 0700 -R ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/log
chmod 0700 -R ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/extensions
chmod 0700 -R ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/var/jrl


chown -R ${USER_NAME}:${GROUP_NAME} "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}"

ln -snf "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/bin/uninstall.sh" "${SOPHOS_INSTALL}/base/update/var/installedproducts/${PRODUCT_LINE_ID}.sh"
ln -snf "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/VERSION.ini" "${SOPHOS_INSTALL}/base/update/var/installedproductversions/${PRODUCT_LINE_ID}.ini"

if software_changed ${DIST} ${PRODUCT_LINE_ID}
then
    perform_cleanup ${DIST} ${PRODUCT_LINE_ID}
fi

# note need to perform supplement copy after clean up is called, because the clean-up may remove the supplement if a supplement is
# replacing a shipped file.
# Copy supplements into place
if [[ -f  ${DIST}/scheduled_query_pack/sophos-scheduled-query-pack.conf ]]
then
  # Remove enabled pack to ensure upgrades cannot result in both enabled and disabled query packs being present
  rm -f ${SOPHOS_INSTALL}/plugins/edr/etc/osquery.conf.d/sophos-scheduled-query-pack.conf
  cp ${DIST}/scheduled_query_pack/sophos-scheduled-query-pack.conf ${SOPHOS_INSTALL}/plugins/edr/etc/osquery.conf.d/sophos-scheduled-query-pack.conf.DISABLED
  cp ${DIST}/scheduled_query_pack/sophos-scheduled-query-pack.conf ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack.conf
  chmod 600 ${SOPHOS_INSTALL}/plugins/edr/etc/osquery.conf.d/sophos-scheduled-query-pack.conf.DISABLED
  chmod 600 ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack.conf
fi
if [[ -f  ${DIST}/scheduled_query_pack/sophos-scheduled-query-pack.mtr.conf ]]
then
  # Remove enabled pack to ensure upgrades cannot result in both enabled and disabled query packs being present
  rm -f ${SOPHOS_INSTALL}/plugins/edr/etc/osquery.conf.d/sophos-scheduled-query-pack.mtr.conf
  cp ${DIST}/scheduled_query_pack/sophos-scheduled-query-pack.mtr.conf ${SOPHOS_INSTALL}/plugins/edr/etc/osquery.conf.d/sophos-scheduled-query-pack.mtr.conf.DISABLED
  cp ${DIST}/scheduled_query_pack/sophos-scheduled-query-pack.mtr.conf ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack.mtr.conf
  chmod 600 ${SOPHOS_INSTALL}/plugins/edr/etc/osquery.conf.d/sophos-scheduled-query-pack.mtr.conf.DISABLED
  chmod 600 ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack.mtr.conf
fi
if [[ -f  ${DIST}/scheduled_query_pack_next/sophos-scheduled-query-pack.conf ]]
then
  cp ${DIST}/scheduled_query_pack_next/sophos-scheduled-query-pack.conf ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack-next.conf
  chmod 600 ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack-next.conf
fi
if [[ -f  ${DIST}/scheduled_query_pack_next/sophos-scheduled-query-pack.mtr.conf ]]
then
  cp ${DIST}/scheduled_query_pack_next/sophos-scheduled-query-pack.mtr.conf ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack-next.mtr.conf
  chmod 600 ${SOPHOS_INSTALL}/plugins/edr/etc/query_packs/sophos-scheduled-query-pack-next.mtr.conf
fi
copy_manifests ${DIST} ${PRODUCT_LINE_ID}

# Create config file to manage if AuditD should be stopped by the plugin
CONFIG_FILE="${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/etc/plugin.conf"
INSTALL_OPTIONS_FILE="${SOPHOS_INSTALL}/base/etc/install_options"

if [[ ! -f "${CONFIG_FILE}" && -f "${INSTALL_OPTIONS_FILE}" ]]
then
    # Default to disabling auditd
    AUDITD_OPTION="disable_auditd=1"
    if grep -q "^--disable-auditd" "${INSTALL_OPTIONS_FILE}"
    then
        AUDITD_OPTION="disable_auditd=1"
    elif grep -q "^--do-not-disable-auditd" "${INSTALL_OPTIONS_FILE}"
    then
        AUDITD_OPTION="disable_auditd=0"
    fi
    echo ${AUDITD_OPTION} >> "${CONFIG_FILE}"
fi

if ! grep -q "running_mode" "${CONFIG_FILE}"
  then
    echo "running_mode=0" >> "${CONFIG_FILE}"
fi

if ! grep -q "network_tables" "${CONFIG_FILE}"
  then
    echo "network_tables=0" >> "${CONFIG_FILE}"
fi

#After install start the plugin
"${SOPHOS_INSTALL}/bin/wdctl" start "${PLUGIN_NAME}" || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start plugin ${PLUGIN_NAME}"

# perform final checks to ensure plugin has been installed and is running.
function confirmProcessRunning()
{
    pgrep -f "$1" &> /dev/null
}

function waitForProcess()
{
    for (( deadline = $SECONDS + 30; $SECONDS < $deadline; ))
    do
        confirmProcessRunning "$@" && return 0
        sleep 1
    done

    return 1
}

function waitForNamedPipeToBeCreated()
{
    for (( deadline = $SECONDS + 30; $SECONDS < $deadline; ))
    do
        [[ -p $1 ]] && return 0
        sleep 1
    done

    return 1
}

function is_rsyslog_installed()
{
    systemctl list-unit-files | grep -q rsyslog
}

function is_rsyslog_running()
{
    systemctl is-active rsyslog | grep -q -w active
}

# Check key files have been installed
[[ -f "${SOPHOS_INSTALL}/plugins/edr/bin/edr" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "edr executable failed to be installed"
[[ -f "${SOPHOS_INSTALL}/plugins/edr/bin/osqueryd" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "edr osquery executable failed to be installed"
[[ -f "${SOPHOS_INSTALL}/base/update/var/installedproducts/ServerProtectionLinux-Plugin-EDR.sh" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "edr uninstall link file failed to be created"
[[ -f "${SOPHOS_INSTALL}/base/update/var/installedproductversions/ServerProtectionLinux-Plugin-EDR.ini" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "edr version link file failed to be created"
[[ -f "${SOPHOS_INSTALL}/plugins/edr/bin/uninstall.sh" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "edr uninstall script failed to be installed"

echo ${SOPHOS_INSTALL}/plugins/edr/extensions/SophosMTR.ext > ${SOPHOS_INSTALL}/plugins/edr/extensions/extensions.load

# Check services are running after install
waitForProcess "${SOPHOS_INSTALL}/plugins/edr/bin/edr" || failure ${EXIT_FAIL_SERVICE} "EDR plugin not running"
waitForProcess "${SOPHOS_INSTALL}/plugins/edr/bin/osqueryd" || failure ${EXIT_FAIL_SERVICE} "EDR plugin not running"

# Configure rsyslog to write into the named pipe created by osquery
# Steps:
# Wait for named pipe to be created
# Copy rsyslog config which tells ryslog how to write into the named pipe
# if SELinux is installed create rule to allow rsyslog to write into the named pipe
# restart rsyslog to pick-up new configuration.

waitForNamedPipeToBeCreated  "${SOPHOS_INSTALL}/shared/syslog_pipe"

if is_rsyslog_installed
then
  if is_rsyslog_running
  then
    if [[ -d /etc/rsyslog.d/ ]]
    then
      cp ${SOPHOS_INSTALL}/plugins/edr/etc/syslog_configs/rsyslog_sophos-spl.conf /etc/rsyslog.d/

      if [[ $(which getenforce) ]]
      then
        semanage fcontext -a -t var_log_t /opt/sophos-spl/shared/syslog_pipe
        restorecon -Fv /opt/sophos-spl/shared/syslog_pipe
      fi
      systemctl restart rsyslog
    fi
  fi
fi






