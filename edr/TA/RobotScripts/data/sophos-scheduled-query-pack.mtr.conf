{
    "schedule": {
        "host_sensor_heartbeat_check": {
            "query": "SELECT\n    timestamp,\n    datetime,\n    local_time,\n    unix_time,\n    local_timezone\nFROM time;",
            "description": "Gets the current host time information,checking whether queries are running.",
            "denylist": true,
            "interval": 3600,
            "removed": false,
            "tag": "stream"
        },
        "host_sensor_version_darwin": {
            "query": "WITH\n  v1_version(host_sensor_version, query_version) AS (\n    SELECT TRIM(JSON_EXTRACT(line, '$.version'), \"'\") AS v1_hs_version, 1\n    FROM grep\n    WHERE path = '/Library/Logs/Sophos/Managed Detection and Response/dbos.log' AND pattern = 'Commit'\n    ORDER BY line DESC\n    LIMIT 1\n  ),\n  v2_version(host_sensor_version, query_version) AS (\n    SELECT TRIM(version, \"'\") AS v2_hs_version, 2\n    FROM osquery_extensions\n    WHERE name = \"sophosmdrextension\" AND v2_hs_version != ''\n  )\nSELECT host_sensor_version, query_version\nFROM v2_version UNION SELECT * FROM v1_version -- Need to use this UNION SELECT * syntax to circumvent an `unable to use UNION after ORDER BY error`\nORDER BY query_version DESC\nLIMIT 1;",
            "interval": 14400,
            "removed": false,
            "denylist": false,
            "platform": "darwin",
            "description": "Gets the current host sensor version.",
            "tag": "stream"
        },
        "host_sensor_version_linux": {
            "query": "WITH\n  v1_version(host_sensor_version, query_version) AS (\n    SELECT TRIM(JSON_EXTRACT(line, '$.version'), \"'\") AS v1_hs_version, 1\n    FROM grep\n    WHERE path = '/opt/sophos-spl/plugins/mtr/dbos/data/logs/dbos.log' AND pattern = 'Commit'\n    ORDER BY line DESC\n    LIMIT 1\n  ),\n  v2_version(host_sensor_version, query_version) AS (\n    SELECT TRIM(version, \"'\") AS v2_hs_version, 2\n    FROM osquery_extensions\n    WHERE name = \"sophosmdrextension\" AND v2_hs_version != ''\n  )\nSELECT host_sensor_version, query_version\nFROM v2_version UNION SELECT * FROM v1_version -- Need to use this UNION SELECT * syntax to circumvent an `unable to use UNION after ORDER BY error`\nORDER BY query_version DESC\nLIMIT 1;",
            "interval": 14400,
            "removed": false,
            "denylist": false,
            "platform": "linux",
            "description": "Gets the current host sensor version.",
            "tag": "stream"
        },
        "host_sensor_version_windows": {
            "query": "WITH\n  v1_version(host_sensor_version, query_version) AS (\n    SELECT TRIM(JSON_EXTRACT(line, '$.version'), \"'\") AS v1_hs_version, 1\n    FROM grep\n    WHERE path = 'C:\\ProgramData\\Sophos\\Managed Threat Response\\Logs\\dbos.log' AND pattern = 'Commit'\n    ORDER BY line DESC\n    LIMIT 1\n  ),\n  v2_version(host_sensor_version, query_version) AS (\n    SELECT TRIM(version, \"'\") AS v2_hs_version, 2\n    FROM osquery_extensions\n    WHERE name = \"sophosmdrextension\" AND v2_hs_version != ''\n  )\nSELECT host_sensor_version, query_version\nFROM v2_version UNION SELECT * FROM v1_version -- Need to use this UNION SELECT * syntax to circumvent an `unable to use UNION after ORDER BY error`\nORDER BY query_version DESC\nLIMIT 1;",
            "interval": 14400,
            "removed": false,
            "denylist": false,
            "platform": "windows",
            "description": "Gets the current host sensor version.",
            "tag": "stream"
        },
        "osquery_process": {
            "query": "SELECT pid, name, percent_processor_time,\nhandle_count, elapsed_time, start_time,\ndisk_bytes_read, disk_bytes_written,\nuser_time, system_time, total_size,\nCAST(user_time+system_time AS FLOAT) / (SELECT sum(user_time+system_time) FROM processes) AS cpu_percent\nFROM processes\nWHERE name IN ('SophosMDR.exe', 'SophosOsquery.exe', 'SophosOsqueryExtension.exe', 'SophosOSQuery', 'SophosMDR', 'SophosMTR', 'osquery', 'osquery.0');",
            "interval": 14400,
            "removed": false,
            "denylist": false,
            "description": "Retrieves Osquery and MTR process information on all platforms.",
            "tag": "stream"
        },
        "osquery_query_schedule": {
            "query": "SELECT name, interval, executions,\ndenylisted, output_size, wall_time,\nuser_time, system_time, average_memory,\n(user_time + system_time)/executions as average_time\nFROM osquery_schedule;",
            "interval": 14400,
            "removed": false,
            "denylist": false,
            "description": "Retrieves the Osquery scheduled query performance metrics for all platforms.",
            "tag": "stream"
        },
        "osquery_rocksdb_error_osx": {
            "query": "SELECT * FROM grep\nWHERE path=\"/Library/Logs/Sophos/Managed Detection and Response/osqueryd.output.log\"\nAND pattern=\"RocksDB:\"\nAND (line LIKE \"I%Stalling writes because we have%\")\nLIMIT 10;",
            "interval": 86400,
            "removed": false,
            "denylist": false,
            "platform": "darwin",
            "description": "Retrieves the Osquery RocksDB stalling write events indicating backed up process_events on MacOS.",
            "tag": "stream"
        },
        "osquery_rocksdb_size_linux": {
            "query": "WITH files (\n  number_of_files,\n  total_size,\n  mb\n) AS (\n  SELECT count(*) AS number_of_files,\n  SUM(size) AS total_size,\n  SUM(size)/1024/1024 AS mb\n  FROM file\n  WHERE path LIKE '/opt/sophos-spl/plugins/mtr/dbos/data/osquery.db/%'\n)\nSELECT\n  number_of_files,\n  total_size,\n  mb\nFROM files\nWHERE mb > 50;",
            "interval": 86400,
            "removed": false,
            "denylist": false,
            "platform": "linux",
            "description": "Retrieves the size of Osquery RocksDB on Linux.",
            "tag": "stream"
        },
        "osquery_rocksdb_size_osx": {
            "query": "WITH files (\n  number_of_files,\n  total_size,\n  mb\n) AS (\n  SELECT count(*) AS number_of_files,\n  SUM(size) AS total_size,\n  SUM(size)/1024/1024 AS mb\n  FROM file\n  WHERE path LIKE '/Library/Application Support/Sophos Managed Detection and Response/osquery.db/%'\n)\nSELECT\n  number_of_files,\n  total_size,\n  mb\nFROM files\nWHERE mb > 20;",
            "interval": 86400,
            "removed": false,
            "denylist": false,
            "platform": "darwin",
            "description": "Retrieves the size of Osquery RocksDB on MacOS.",
            "tag": "stream"
        },
        "osquery_rocksdb_size_windows": {
            "query": "WITH files (\n  number_of_files,\n  total_size,\n  mb\n) AS (\n  SELECT count(*) AS number_of_files,\n  SUM(size) AS total_size,\n  SUM(size)/1024/1024 AS mb\n  FROM file\n  WHERE path LIKE 'C:\\ProgramData\\Sophos\\Managed Detection and Response\\Data\\osquery.db\\%'\n)\nSELECT\n  number_of_files,\n  total_size,\n  mb\nFROM files\nWHERE mb > 20;",
            "interval": 86400,
            "removed": false,
            "denylist": false,
            "platform": "windows",
            "description": "Retrieves the size of Osquery RocksDB on Windows.",
            "tag": "stream"
        },
        "osquery_watchdog_logs_windows": {
            "query": "SELECT * FROM grep\nWHERE path=\"C:\\ProgramData\\Sophos\\Managed Detection and Response\\Logs\\osqueryd.output.log\"\nAND pattern=\"exceeded:\"\nAND (line LIKE \"W%stopping: Memory limits %\" OR line LIKE \"W%Maximum sustainable CPU utilization limit%\");",
            "interval": 86400,
            "removed": false,
            "denylist": false,
            "platform": "windows",
            "description": "Retrieves the Osquery watchdog logs for Windows.",
            "tag": "stream"
        },
        "sophos_events_darwin": {
            "query": "SELECT\n  eventId AS event_id,\n  eventTime AS event_timestamp,\n  \"[\" ||\n    GROUP_CONCAT(\n      JSON_OBJECT(\n        'event_timestamp', eventTime,\n        'event_type', eventType,\n        'event_type_name',\n        CASE\n          WHEN eventType = 1 THEN 'Malware and PUA'\n          WHEN eventType = 2 THEN 'Web Filtering'\n          WHEN eventType = 5 THEN 'Network Threats'\n          WHEN eventType = 6 THEN 'Ransomware'\n          ELSE ''\n        END,\n        'user_name', userName,\n        'severity', severity,\n        'rca_time', rcaTime,\n        'rca_status', rcaStatus,\n        'rca_status_name',\n        CASE\n         WHEN rcaStatus = 0 THEN 'none'\n         WHEN rcaStatus = 1 THEN 'uploaded'\n         WHEN rcaStatus = 2 THEN 'errorCreate'\n         WHEN rcaStatus = 3 THEN 'errorUpload'\n         WHEN rcaStatus = 8 THEN 'limitExceeded'\n         ELSE ''\n        END,\n        'event_name', eventName,\n        'event_status', eventStatus,\n        'event_status_name',\n        CASE\n          WHEN eventType = 1 AND eventStatus = 0 THEN 'open'\n          WHEN eventType = 1 AND eventStatus = 1 THEN 'actionRequired'\n          WHEN eventType = 1 AND eventStatus = 2 THEN 'failedToClean'\n          WHEN eventType = 1 AND eventStatus = 3 THEN 'resolved'\n          WHEN eventType = 5 AND eventStatus = 0 THEN 'running'\n          WHEN eventType = 5 AND eventStatus = 1 THEN 'present'\n          WHEN eventType = 5 AND eventStatus = 2 THEN 'resolved'\n          WHEN eventType = 5 AND eventStatus = 3 THEN 'ignored'\n          WHEN eventType = 6 AND eventStatus = 0 THEN 'running'\n          WHEN eventType = 6 AND eventStatus = 1 THEN 'present'\n          WHEN eventType = 6 AND eventStatus = 2 THEN 'resolved'\n          WHEN eventType = 6 AND eventStatus = 3 THEN 'ignored'\n          ELSE ''\n        END,\n        'long_name', longName,\n        'threat_type', threatType,\n        'threat_type_name',\n        CASE\n          WHEN threatType = 0 THEN 'malware'\n          WHEN threatType = 1 THEN 'PUA'\n          ELSE ''\n        END,\n        'app_type', appType,\n        'app_type_name',\n        CASE\n          WHEN appType = 0 THEN 'Adware'\n          WHEN appType = 1 THEN 'Dialer'\n          WHEN appType = 2 THEN 'Hacking tool'\n          WHEN appType = 3 THEN 'System monitor'\n          WHEN appType = 4 THEN 'Remote administration tool'\n          WHEN appType = 5 THEN 'Other'\n          WHEN appType = 8 THEN 'File sharing'\n          ELSE ''\n        END,\n        'first_detection', firstDetection,\n        'last_detection', lastDetection,\n        'scan_required', scanRequired,\n        'reboot_required', rebootRequired,\n        'manual_cleanup_required', manualCleanupRequired,\n        'resolved', resolved,\n        'resolved_name',\n        CASE\n          WHEN eventType = 1 AND resolved = 0 THEN 'unknown'\n          WHEN eventType = 1 AND resolved = 1 THEN 'cleanup'\n          WHEN eventType = 1 AND resolved = 2 THEN 'cleanupFullscan'\n          WHEN eventType = 1 AND resolved = 3 THEN 'cleanupReboot'\n          WHEN eventType = 1 AND resolved = 4 THEN 'noLongerExist'\n          WHEN eventType = 1 AND resolved = 5 THEN 'authorized'\n          WHEN eventType = 1 AND resolved = 6 THEN 'partiallyCleaned'\n          WHEN eventType = 1 AND resolved = 7 THEN 'executionBlocked'\n          WHEN eventType = 1 AND resolved = 8 THEN 'manuallyRemoved'\n          WHEN eventType = 2 AND resolved = 0 THEN 'always blocked'\n          ELSE ''\n        END,\n        'resolved_description',\n        CASE\n          WHEN eventType = 1 AND resolved = 0 THEN 'the resolved action is unknown'\n          WHEN eventType = 1 AND resolved = 1 THEN 'the threat was cleaned up'\n          WHEN eventType = 1 AND resolved = 2 THEN 'the threat was cleaned up after full scan was preceded'\n          WHEN eventType = 1 AND resolved = 3 THEN 'the threat was cleaned up after the endpoint was rebooted'\n          WHEN eventType = 1 AND resolved = 4 THEN 'the threat no longer exists on disc'\n          WHEN eventType = 1 AND resolved = 5 THEN 'the PUA was authorized to run'\n          WHEN eventType = 1 AND resolved = 6 THEN 'the scanning engine marks the threat as partially cleaned'\n          WHEN eventType = 1 AND resolved = 7 THEN 'the PUA or controlled application has been blocked'\n          WHEN eventType = 1 AND resolved = 8 THEN 'the threat was ignored by the user'\n          WHEN eventType = 2 AND resolved = 0 THEN ''\n          ELSE ''\n        END,\n        'resolved_time', resolvedTime,\n        'threat_detection_time', threatDetectionTime,\n        'detection_source', detectionSource,\n        'detection_source_name',\n        CASE\n          WHEN eventType = 1 AND detectionSource = 0 THEN 'on-access'\n          WHEN eventType = 1 AND detectionSource = 1 THEN 'on-demand'\n          ELSE ''\n        END,\n        'detection_path', detectionPath,\n        'detection_user', detectionUser,\n        'detection_file_present', detectionFilePresent,\n        'url', url,\n        'process_time', processTime,\n        'process_status', processStatus,\n        'process_status_name',\n        CASE\n          WHEN processStatus = 0 THEN 'running'\n          WHEN processStatus = 1 THEN 'present'\n          ELSE ''\n        END,\n        'process_path', processPath,\n        'process_pid', processPid,\n        'destination', destination\n      )\n    )\n  || \"]\"  AS details_json,\n  severity AS severity,\n  eventName AS event_name,\n  eventType AS event_type,\n  resolved AS resolved,\n  userName AS user_name\nFROM sophos_mac_event_store\n-- sophos_mac_event_store doesn't require a 300 second buffer as the events appear immediately\nWHERE eventTime > STRFTIME(\"%s\", \"NOW\") - 625\nGROUP BY eventId;",
            "interval": 600,
            "removed": false,
            "denylist": false,
            "description": "Retrieves a list of detections from sophos_mac_event_store table with attached details. Reference 'https://wiki.sophos.net/display/savmaceng/MTR+Schema+Change%3A+Sophos+Extension+for+macOS+v1.0.0'",
            "platform": "darwin",
            "tag": "stream"
        },
        "sophos_events_windows": {
            "query": "WITH grouped_sophos_windows_events(\n\tfamily_id,\n\tevent_timestamp,\n\tsummary_json,\n\traw_data,\n\tgroupNum,\n\tseverity,\n\tapp,\n\tresource_id,\n\tcomponent_id,\n\thmpa_type,\n\tthreat_name,\n\tthreat_type,\n\tuser_name,\n\tuser_sid\n) AS (\n  SELECT\n    s.familyId AS family_id,\n    s.timeStamp AS event_timestamp,\n    s.raw AS summary_json,\n    d.raw AS raw_data,\n    (ROW_NUMBER() OVER(PARTITION BY s.familyId))/25 AS groupNum,\n    JSON_EXTRACT(s.raw, '$.severity') AS severity,\n    JSON_EXTRACT(s.raw, '$.app') AS app,\n    JSON_EXTRACT(s.raw, '$.resourceId') AS resource_id,\n    JSON_EXTRACT(s.raw, '$.componentName') AS component_id,\n    JSON_EXTRACT(s.raw, '$.hmpaType') AS hmpa_type,\n    JSON_EXTRACT(s.raw, '$.threatName') AS threat_name,\n    JSON_EXTRACT(s.raw, '$.threatType') AS threat_type,\n    JSON_EXTRACT(s.raw, '$.userName') AS user_name,\n    JSON_EXTRACT(s.raw, '$.userSid') AS user_sid\n  FROM sophos_events_summary s\n  JOIN sophos_events_details d ON s.familyId = d.familyId\n  WHERE\n    CAST(STRFTIME('%s', event_timestamp) AS int) < CAST(STRFTIME('%s','now')-120 AS int)\n  AND\n    CAST(STRFTIME('%s', event_timestamp) AS int) > CAST(STRFTIME('%s','now')-820 AS int)\n  AND\n    resource_id NOT LIKE 'health.%' AND resource_id NOT LIKE 'event.sau.%'\n)\nSELECT\n  family_id,\n  event_timestamp,\n  summary_json,\n  \"[\" || GROUP_CONCAT(raw_data) || \"]\" AS details_json,\n  severity,\n  app,\n  resource_id,\n  component_id,\n  hmpa_type,\n  threat_name,\n  threat_type,\n  user_name,\n  user_sid\nFROM grouped_sophos_windows_events\nGROUP BY family_id,groupNum;",
            "interval": 600,
            "removed": false,
            "denylist": false,
            "description": "Retrieves a list of detections from sophos_events_summary table with attached details",
            "platform": "windows",
            "tag": "stream"
        },
        "stopped_processes_windows_sophos": {
            "query": "SELECT\n  spj.sophosPID,\n  spj.endTime\nFROM\n  sophos_process_journal AS spj WHERE spj.eventType=1\n  AND spj.query_id = 'stopped_processes_windows_sophos'\n  AND cmdline != 'cmd /c tasklist.exe /NH /FI \"IMAGENAME eq wapptunneld.exe\"'\n  AND cmdline != 'tasklist.exe  /NH /FI \"IMAGENAME eq wapptunneld.exe\"';\n",
            "interval": 20,
            "removed": false,
            "denylist": false,
            "description": "Lists the stopped processes which have ended in target system from sophos_process_journal table.",
            "platform": "windows",
            "tag": "stream"
        },
        "threat_space_after_filename": {
            "query": "SELECT target_path as path, action, uid, gid, mode, size, atime, mtime, ctime, sha1, sha256 from file_events where path like '% ' and action != 'DELETED';",
            "interval": 43200,
            "removed": false,
            "denylist": false,
            "description": "Detect files that have a space after the extension.",
            "platform": "linux,darwin",
            "tag": "stream"
        },
        "windows_accessibility_md5": {
            "query": "SELECT path, directory, sha1, sha256 FROM hash WHERE (path='c:\\windows\\system32\\utilman.exe' OR path='c:\\windows\\system32\\magnify.exe' OR  path='c:\\windows\\system32\\narrator.exe' OR path='c:\\windows\\system32\\displayswitch.exe' OR path='c:\\windows\\system32\\osk.exe' OR path='c:\\windows\\system32\\sethc.exe');",
            "interval": 14400,
            "removed": false,
            "denylist": true,
            "description": "Return hashes of Windows accessibility binaries.",
            "platform": "windows",
            "tag": "stream"
        },
        "windows_disk_md5": {
            "query": "SELECT\n  file.filename,\n  file.ctime,\n  file.path,\n  sfp.sha1,\n  sfp.sha256,\n  sfp.fileSize,\n  sfp.mlScore,\n  sfp.mlScoreData,\n  sfp.puaScore,\n  sfp.globalRep,\n  sfp.globalRepData,\n  sfp.localRep,\n  sfp.localRepData,\n  sfp.coreFileInfo\nFROM file\nLEFT JOIN sophos_file_properties AS sfp ON file.path = sfp.pathname\nWHERE (\n  file.path LIKE 'C:\\Users\\%\\Downloads\\%%' OR\n  file.path LIKE 'C:\\Users\\%\\Desktop\\%%' OR\n  file.path LIKE 'C:\\Users\\%\\Appdata\\Roaming\\%%' OR\n  file.path LIKE 'C:\\Users\\%\\Appdata\\Local\\Temp\\%%' OR\n  file.path LIKE 'C:\\Windows\\Temp\\%%'\n) AND (\n  file.filename LIKE '%.exe' OR\n  file.filename LIKE '%.dll' OR\n  file.filename LIKE '%.ps1'\n);",
            "interval": 14400,
            "removed": false,
            "denylist": true,
            "description": "Return hashes of binaries running from Downloads folder.",
            "platform": "windows",
            "tag": "stream"
        },
        "windows_shell_md5": {
            "query": "SELECT path, directory, sha1, sha256 FROM hash WHERE (path='c:\\windows\\system32\\cmd.exe' OR path='c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe');",
            "interval": 86400,
            "removed": false,
            "denylist": true,
            "description": "Return hashes of Windows shell binaries.",
            "platform": "windows",
            "tag": "stream"
        }
    },
    "decorators": {
        "interval": {
            "3600": [
                "SELECT endpoint_id AS eid from sophos_endpoint_info",
                "SELECT\n    interface_details.mac AS mac_address,\n    interface_addresses.mask AS ip_mask,\n    interface_addresses.address AS ip_address\nFROM\n    interface_addresses\n    JOIN interface_details ON interface_addresses.interface = interface_details.interface\nWHERE\n    ip_address NOT LIKE '127.%'\n    AND ip_address NOT LIKE '%:%'\n    AND ip_address NOT LIKE '169.254.%'\n    AND ip_address NOT LIKE '%.1'\nORDER BY\n    interface_details.last_change\nLIMIT\n    1",
                "SELECT\n    user AS username\nFROM\n    logged_in_users\nWHERE\n    (\n        type = 'user'\n        OR type = 'active'\n    )\nORDER BY\n    time DESC\nLIMIT\n    1"
            ]
        },
        "load": [
            "SELECT (unix_time - (select total_seconds from uptime)) AS boot_time FROM time",
            "SELECT\n    CASE\n        WHEN computer_name == '' THEN hostname\n        ELSE computer_name\n    END AS hostname\nFROM\n    system_info",
            "SELECT\n    name AS os_name,\n    version AS os_version,\n    platform AS os_platform\nFROM\n    os_version\nLIMIT\n    1",
            "SELECT\n    CASE \n        WHEN upper(platform) == 'WINDOWS' AND upper(name) LIKE '%SERVER%' THEN 'server' \n        WHEN upper(platform) == 'WINDOWS' AND upper(name) NOT LIKE '%SERVER%' THEN 'client' \n        WHEN upper(platform) == 'DARWIN' THEN 'client' \n        WHEN (SELECT count(*) FROM system_info WHERE cpu_brand LIKE '%Xeon%') == 1 THEN 'server' \n        WHEN (SELECT count(*) FROM system_info WHERE hardware_vendor LIKE '%VMWare%') == 1 THEN 'server' \n        WHEN (SELECT count(*) FROM system_info WHERE hardware_vendor LIKE '%QEMU%') == 1 THEN 'server' \n        WHEN (\n            (SELECT obytes FROM interface_details ORDER by obytes DESC LIMIT 1) > (SELECT ibytes FROM interface_details ORDER by ibytes DESC LIMIT 1)\n            ) == 1 THEN 'server'\n        ELSE 'client'\n    END AS 'os_type'\nFROM 'os_version';",
            "SELECT endpoint_id AS eid from sophos_endpoint_info",
            "SELECT\n    interface_details.mac AS mac_address,\n    interface_addresses.mask AS ip_mask,\n    interface_addresses.address AS ip_address\nFROM\n    interface_addresses\n    JOIN interface_details ON interface_addresses.interface = interface_details.interface\nWHERE\n    ip_address NOT LIKE '127.%'\n    AND ip_address NOT LIKE '%:%'\n    AND ip_address NOT LIKE '169.254.%'\n    AND ip_address NOT LIKE '%.1'\nORDER BY\n    interface_details.last_change\nLIMIT\n    1",
            "SELECT\n    user AS username\nFROM\n    logged_in_users\nWHERE\n    (\n        type = 'user'\n        OR type = 'active'\n    )\nORDER BY\n    time DESC\nLIMIT\n    1",
            "SELECT '1.1.58' query_pack_version"
        ]
    }
}