def buildInstaller()
{
    withEnv(['PATH+CMAKE=/usr/local/bin:/redist/binaries/everest/cmake/bin',
    'LD_LIBRARY_PATH=/home/pair/gcc-8.1.0/build/prev-x86_64-pc-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6:$LD_LIBRARY_PATH']){
        checkout scm
        sh 'rm -rf build64 && mkdir -p build64 && cd build64 && cmake .. && make && make install && make dist'
    }
}
def buildInstallerWithScript()
{
    withEnv(['PATH+CMAKE=/usr/local/bin:/redist/binaries/everest/cmake/bin']){
        checkout scm
        sh './buildLinux.sh'
    }
}

def copyBuildToFiler()
{
    sh 'sudo rm -rf /mnt/filer6/linux/SSPL/JenkinsBuildOutput/${BRANCH_NAME}'
    sh 'sudo mkdir -p /mnt/filer6/linux/SSPL/JenkinsBuildOutput/${BRANCH_NAME}'
    sh 'sudo cp -r build64/* /mnt/filer6/linux/SSPL/JenkinsBuildOutput/${BRANCH_NAME}'
}

pipeline {
    agent none
    environment {
            // Set library path, as build machines need new GCC, SUL, Boost and openssl.
            LD_LIBRARY_PATH='/redist/binaries/linux11/input/openssl/lib64:/redist/binaries/linux11/input/SUL/lib64:/redist/binaries/linux11/input/boost/lib64:/redist/binaries/linux11/input/protobuf/install64/lib/:/usr/local/lib64:$LD_LIBRARY_PATH'
     }
    stages {
        stage('Build on Centos Build Machine') {
            agent {
                node {
                    label 'centos-jenkins-builder'
                    // Custom Workspace needed so system tests know where to look for base
                    customWorkspace "ThinInstaller/${BRANCH_NAME}"
                }
            }
            steps {
                buildInstaller()
            }
            post {
                success {
                    copyBuildToFiler()
                }
            }
        }

    }
}