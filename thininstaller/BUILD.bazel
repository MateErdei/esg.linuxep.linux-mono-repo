# Copyright 2023 Sophos Limited. All rights reserved.
load("//tools/config:sophos_versioning.bzl", "expand_version")
load("//common:strip.bzl", "strip")
load("//thininstaller:version_info.bzl", "THIN_INSTALLER_BASE_VERSION", "THIN_INSTALLER_VERSIONING_COMPONENT_NAME")
load("//tools/config:copy_file.bzl", "copy_file")
load("//tools/config:expand_template.bzl", "expand_template")
load("//tools/config:manifest_sign.bzl", "manifest_sign")
load("//tools/config:soph_cc_rules.bzl", "soph_cc_binary")
load("//tools/config:sophos_asset.bzl", "soph_release_asset")
load(":create_thininstaller_asset.bzl", "create_thininstaller_asset")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

soph_cc_binary(
    name = "installer",
    srcs = [
        "installer.cpp",
    ],
    deps = [
        "//base/modules/CentralRegistration",
        "//base/modules/Common/CurlWrapper",
        "//base/modules/Common/HttpRequestsImpl",
        "//base/modules/Common/Policy",
        "//imports/thirdparty/nlohmann-json",
        "@curl",
    ],
)

copy_file(
    name = "rootca_crt",
    src = "certs/ps_rootca.crt",
    out = "certs/rootca.crt",
)

strip(
    name = "installer_files",
    srcs_remapped = {
        "@gcc//:dynamic_runtime_lib": "../gcc/lib64 -> lib64",
    },
    srcs_renamed = {
        "//imports/internal/versig": "bin/versig",
        "//base/products/Base/SulDownloader": "bin/SulDownloader",
        ":installer": "bin/installer",
        "certs/mcs_rootca.crt": "mcs_rootca.crt",
        "certs/rootca384.crt": "rootca384.crt",
        "certs/sdds_https_rootca.crt": "sdds_https_rootca.crt",
        "certs/ps_rootca.crt": "ps_rootca.crt",
        ":rootca_crt": "rootca.crt",
    },
)

pkg_tar(
    name = "installer_tar",
    srcs = [":installer_files_stripped"],
    extension = "tar.gz",  # Apply compression
    strip_prefix = "/thininstaller",
)

expand_template(
    name = "commonCompatibilityFunctions_sh",
    out = "commonCompatibilityFunctions.sh",
    substitutions = {
        "@BUILD_SYSTEM_LIBC_VERSION@": "2.17",  # TODO LINUXDAR-6736: automatically provide this, perhaps via @gcc
    },
    template = "commonCompatibilityFunctions.in.sh",
)

genrule(
    name = "installer_header_with_common_functions",
    srcs = [
        "installer_header.in.sh",
        "commonCompatibilityFunctions_sh",
    ],
    outs = ["installer_header_with_common_functions.sh"],
    cmd_bash = "$(location //common:expand_template_from_file) $(location installer_header.in.sh) @COMMON_SPL_COMPATIBILITY_FUNCTIONS@ $(location :commonCompatibilityFunctions_sh) $@",
    tools = ["//common:expand_template_from_file"],
)

genrule(
    name = "spl_compatiblity_checks_sh",
    srcs = [
        "SPLCompatibilityChecks.in.sh",
        "commonCompatibilityFunctions_sh",
    ],
    outs = ["SPLCompatibilityChecks.sh"],
    cmd_bash = "$(location //common:expand_template_from_file) $(location SPLCompatibilityChecks.in.sh) @COMMON_SPL_COMPATIBILITY_FUNCTIONS@ $(location :commonCompatibilityFunctions_sh) $@",
    tools = ["//common:expand_template_from_file"],
)

# Version is only updated if the installer_header.in.sh or anything in the installer_tar are changed
expand_version(
    name = "installer_header_sh",
    base_version_str = THIN_INSTALLER_BASE_VERSION,
    component_name = THIN_INSTALLER_VERSIONING_COMPONENT_NAME,
    template_file = ":installer_header_with_common_functions",
    token = "@PRODUCT_VERSION@",
    deps = [
        ":installer_header_with_common_functions",
        ":installer_tar",
    ],
)

genrule(
    name = "sophos_setup_sh",
    srcs = [
        ":installer_header_sh",
        ":installer_tar",
    ],
    outs = ["SophosSetup.sh"],
    cmd_bash = "cat $(location :installer_header_sh) $(location :installer_tar) >$@",
)

manifest_sign(
    name = "manifest.dat",
    srcs = [
        ":sophos_setup_sh",
    ],
    legacy = True,  # TODO LINUXDAR-5855: remove
)

pkg_tar(
    name = "combined_tar",
    srcs = [
        ":manifest.dat",
        ":sophos_setup_sh",
    ],
    extension = "tar.gz",  # Apply compression
)

create_thininstaller_asset(
    name = "thininstaller_zip",
    compatibilty_script = ":spl_compatiblity_checks_sh",
    installer_tar = ":combined_tar",
)

soph_release_asset(
    name = "thininstaller",
    asset = ":thininstaller_zip",
    visibility = ["//products:__pkg__"],
)

py_binary(
    name = "create_thininstaller_asset",
    srcs = [
        "FileInfo.py",
        "create_thininstaller_asset.py",
    ],
)
