#!/usr/bin/env bash

# Copyright 2018-2022 Sophos Limited.  All rights reserved.

# Find the location of where the script is running from
# Allows the script to be called from anywhere either directly or via symlink

PLUGIN_NAME=@PLUGIN_NAME@
PRODUCT_LINE_ID="@PRODUCT_LINE_ID@"
MIN_SAFESTORE_DB_SUPPORTED_AV_VERSION="1.1.0"


SCRIPT_LOCATION="${BASH_SOURCE[0]}"

# if file is symbolic link
if [ -h "$SCRIPT_LOCATION" ]
then
  SCRIPT_DIR="$( cd -P "$( dirname "$SCRIPT_LOCATION" )" >/dev/null && pwd )"
  SCRIPT_LOCATION="$(readlink "$SCRIPT_LOCATION")"  # get location of linked file

  [[ $SCRIPT_LOCATION != /* ]] && SCRIPT_LOCATION="$SCRIPT_DIR/$SCRIPT_LOCATION"
fi

SCRIPT_DIR="$( cd -P "$( dirname "$SCRIPT_LOCATION" )" >/dev/null && pwd )"
BASEDIR="${SCRIPT_DIR%%/plugins/${PLUGIN_NAME}/sbin}"
UNINSTALLDIR="$BASEDIR/plugins/${PLUGIN_NAME}"
SAFESTORE="${UNINSTALLDIR}/safestore"
VAR="${UNINSTALLDIR}/var"
SYMLINK="$BASEDIR/base/update/var/installedproducts/${PRODUCT_LINE_ID}.sh"
SYMLINKVERSION="$BASEDIR/base/update/var/installedproductversions/${PRODUCT_LINE_ID}.ini"
SAVE_DIR="${BASEDIR}/tmp/${PLUGIN_NAME}_downgrade"
SAFESTORE_SAVE_DIR="${BASEDIR}/tmp/safestore_downgrade"

FORCE=0
DOWNGRADE=0
while [[ $# -ge 1 ]]
do
    case $1 in
        --force)
            FORCE=1
            ;;
        --downgrade)
            DOWNGRADE=1
            ;;
    esac
    shift
done

if (( DOWNGRADE == 1 ))
then
    mkdir -p ${SAVE_DIR}
    mkdir -p ${SAFESTORE_SAVE_DIR}
    cp -v ${UNINSTALLDIR}/chroot/log/sophos_threat_detector.log*  ${SAVE_DIR}
    cp -v ${UNINSTALLDIR}/log/av.log*  ${SAVE_DIR}
    cp -v ${UNINSTALLDIR}/log/soapd.log*  ${SAVE_DIR}

    VERSIONED_SAFESTORE_DB=$(date +%s)_SafeStore_${MIN_SAFESTORE_DB_SUPPORTED_AV_VERSION}
    if [[ -d ${SAFESTORE}/safestore_db ]]
    then
      cp -vr ${SAFESTORE}/safestore_db  ${SAFESTORE_SAVE_DIR}/${VERSIONED_SAFESTORE_DB}
    fi

    if [[ -f ${VAR}/persist-threatDatabase ]]
    then
      cp -v ${VAR}/persist-threatDatabase  ${SAFESTORE_SAVE_DIR}
    fi
fi

rm -f /usr/local/bin/avscanner

#"${BASEDIR}/bin/wdctl" removePluginRegistration "on_access_process"
"${BASEDIR}/bin/wdctl" removePluginRegistration "threat_detector"
"${BASEDIR}/bin/wdctl" removePluginRegistration "${PLUGIN_NAME}"

rm -rf "$UNINSTALLDIR"
rm -f "$SYMLINK"
rm -f "$SYMLINKVERSION"
rm -f ${BASEDIR}/var/ipc/plugins/${PLUGIN_NAME}.ipc

if (( DOWNGRADE == 1 ))
then
    LOG_RESTORE_DIR=${UNINSTALLDIR}/log/downgrade-backup
    VAR_RESTORE_DIR=${UNINSTALLDIR}/var/downgrade-backup

    mkdir -p "$LOG_RESTORE_DIR"
    mkdir -p "$VAR_RESTORE_DIR"

    for entry in "$SAVE_DIR"/*
    do
        cp "$entry"  "$LOG_RESTORE_DIR"/"$(basename -- "$entry")"
    done

    for entry in "$SAFESTORE_SAVE_DIR"/*
    do
        cp -r "$entry"  "$VAR_RESTORE_DIR"/"$(basename -- "$entry")"
    done
fi

function removeUser()
{
  function check_user_exists()
  {
      id "$1" &>/dev/null
  }

  local USERNAME=$1
  check_user_exists "$USERNAME" || return 0

  USER_DELETER=$(which deluser 2>/dev/null)
  [[ -x "$USER_DELETER" ]] || USER_DELETER=/usr/sbin/deluser
  [[ -x "$USER_DELETER" ]] || USER_DELETER=$(which userdel 2>/dev/null)
  [[ -x "$USER_DELETER" ]] || USER_DELETER=/usr/sbin/userdel

  if [[ ! -x "$USER_DELETER" ]]
  then
      echo "Unable to delete user $USERNAME" >&2
      return 1
  fi

  local USER_DELETE_TRIES=0
  while [[ $USER_DELETE_TRIES -le 5 ]]
  do
      "$USER_DELETER" "$USERNAME" 2>/dev/null >/dev/null && break
      USER_DELETE_TRIES=$((USER_DELETE_TRIES+1))
      sleep 1
  done
  #return 1 as an error because the user exists
  check_user_exists "$USERNAME" && return 1

  return 0
}

removeUser    sophos-spl-av || echo "Failed to delete user: sophos-spl-av"
removeUser    sophos-spl-threat-detector || echo "Failed to delete user: sophos-spl-threat-detector"
