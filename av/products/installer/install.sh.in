#!/usr/bin/env bash

# Copyright 2018 Sophos Limited.  All rights reserved.

PLUGIN_NAME=@PLUGIN_NAME@
PRODUCT_LINE_ID="@PRODUCT_LINE_ID@"

EXIT_FAIL_CREATE_DIRECTORY=10
EXIT_FAIL_FIND_GROUPADD=11
EXIT_FAIL_ADD_GROUP=12
EXIT_FAIL_FIND_USERADD=13
EXIT_FAIL_ADDUSER=14
EXIT_FAIL_FIND_GETENT=15
EXIT_FAIL_WDCTL_FAILED_TO_COPY=16
EXIT_FAIL_WDCTL_FAILED_TO_START=17
EXIT_FAIL_VERSIONEDCOPY=20
EXIT_FAIL_INSTALL_PACKAGE=21
EXIT_FAIL_COPY_MANIFEST=22
EXIT_FAIL_DELETE_REMOVED_FILES=23

STARTINGDIR=$(pwd)
SCRIPTDIR=${0%/*}
if [[ "$SCRIPTDIR" == "$0" ]]
then
    SCRIPTDIR=${STARTINGDIR}
fi

ABS_SCRIPTDIR=$(cd $SCRIPTDIR && pwd)

[[ -n "$SOPHOS_INSTALL" ]] || SOPHOS_INSTALL=/opt/sophos-spl
[[ -n "$DIST" ]] || DIST=$ABS_SCRIPTDIR

failure()
{
    local CODE=$1
    shift
    echo "$@" >&2
    exit $CODE
}
export DIST
export SOPHOS_INSTALL
export LD_LIBRARY_PATH="$SOPHOS_INSTALL/base/lib64"

USER_NAME=sophos-spl-user
GROUP_NAME=sophos-spl-group

# Use a safe umask while copying files before correcting permissions
umask 077

[[ -d $SOPHOS_INSTALL ]] || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to find installation directory: $SOPHOS_INSTALL"

if [[ ! -x $(which setcap) ]]
then
    echo "Installing setcap"
    if [[ -x $(which apt) ]]
    then
        apt install -y libcap2-bin || failure ${EXIT_FAIL_INSTALL_PACKAGE} "Failed to install libcap2-bin"
    elif [[ -x $(which yum) ]]
    then
        failure ${EXIT_FAIL_INSTALL_PACKAGE} "Unable to install setcap using yum"
    else
        failure ${EXIT_FAIL_INSTALL_PACKAGE} "Unable to install setcap"
    fi
fi
PLUGIN_INSTALL="${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}"
VAR="${PLUGIN_INSTALL}/var"
SUSI_UPDATE_SRC="$SOPHOS_INSTALL/plugins/av/chroot/susi/update_source/"
SUSI_DIST_VERS="$SOPHOS_INSTALL/plugins/av/chroot/susi/distribution_version/"
SUSI_V1DIR="${SUSI_DIST_VERS}version1/"

function delete_removed_vdl()
{
    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/vdl"
    local dest_dir="${SUSI_UPDATE_SRC}/vdl"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed files"
}

function generate_susi_package_manifest()
{
    local nonsupplement_manifest="${SUSI_UPDATE_SRC}/nonsupplement_manifest.txt"
    local temp_manifest="${SUSI_UPDATE_SRC}/temp_manifest.txt"
    local package_manifest="${SUSI_UPDATE_SRC}/package_manifest.txt"
    cp ${nonsupplement_manifest} ${temp_manifest}

    vdl_version=$(grep "Version=" ${SUSI_UPDATE_SRC}/vdl/vvf.xml | awk -F'"' '{print $2}')
    ide_count=$(ls ${SUSI_UPDATE_SRC}/vdl/*.ide | wc -l)
    vdl_hash=$(echo -n "${ide_count}${vdl_version}" | sha256sum | awk '{print $1}')
    echo "vdl ${vdl_hash}" >> ${temp_manifest}

    model_hash=$(sha256sum ${SUSI_UPDATE_SRC}/model/model.dat | awk '{print $1}')
    echo "model ${vdl_hash}" >> ${temp_manifest}

    lrdata_hash=$(cat ${SUSI_UPDATE_SRC}/reputation/filerep.dat ${SUSI_UPDATE_SRC}/reputation/signerrep.dat | sha256sum | awk '{print $1}')
    echo "reputation ${lrdata_hash}" >> ${temp_manifest}

    manifest_hash=$(sha256sum ${temp_manifest} | awk '{print $1}')
    echo $manifest_hash > $package_manifest
    cat $temp_manifest >> $package_manifest

    chmod -R g+rX "${SUSI_UPDATE_SRC}"
    chown -R root:${GROUP_NAME} "${SUSI_UPDATE_SRC}"
}

function bootstrap_susi_from_update_source()
{
    local src_dir=${SUSI_UPDATE_SRC}
    local dest_dir=${SUSI_V1DIR}
    mkdir -p ${SUSI_V1DIR}

    cp -d ${SUSI_UPDATE_SRC}/libsusi.so* ${SUSI_V1DIR}
    cp -d ${SUSI_UPDATE_SRC}/package_manifest.txt* ${SUSI_V1DIR}
    cp -d ${SUSI_UPDATE_SRC}/version_manifest.txt* ${SUSI_DIST_VERS}

    # Flatten directory structure
    for dir in libglobalrep libsavi libsophtainer libupdater lrlib mllib susicore
    do
        cp -rd ${SUSI_UPDATE_SRC}/${dir}/* ${SUSI_V1DIR}
    done

    # Copy the supplements
    cp -rd ${SUSI_UPDATE_SRC}/reputation ${SUSI_V1DIR}/lrdata
    cp -rd ${SUSI_UPDATE_SRC}/model ${SUSI_V1DIR}/mlmodel
    cp -rd ${SUSI_UPDATE_SRC}/vdl ${SUSI_V1DIR}/vdb

    cp -rd ${SUSI_UPDATE_SRC}/rules ${SUSI_V1DIR}/rules

    cp ${SOPHOS_INSTALL}/base/lib64/libz.so.1 ${SUSI_V1DIR}

    chmod -R g+rX "${SUSI_DIST_VERS}"
    chown -R root:${GROUP_NAME} "${SUSI_DIST_VERS}"
}

function install_product()
{
    #In case this is an upgrade request the watchdog stops the plugin
    #A failure with exit code 2 will be ignored as this just means the plugin was not registered
    #This could happen if a plugin is being freshly installed (e.g. for the first time)
    "${SOPHOS_INSTALL}/bin/wdctl" stop "${PLUGIN_NAME}" &>/dev/null || [ $? == 2 ] || echo Failed to stop plugin: ${PLUGIN_NAME}

    #Create plugin registration file
    local TEMP_REG_FILE=${SOPHOS_INSTALL}/tmp/${PLUGIN_NAME}.json
    sed "s;SOPHOS_INSTALL_VALUE;${SOPHOS_INSTALL};g" "${DIST}/files/base/pluginRegistry/${PLUGIN_NAME}.json" >  "${TEMP_REG_FILE}"
    "${SOPHOS_INSTALL}/bin/wdctl" copyPluginRegistration "${TEMP_REG_FILE}" || failure ${EXIT_FAIL_WDCTL_FAILED_TO_COPY} "Failed to copy registration ${TEMP_REG_FILE}"
    rm -f ${TEMP_REG_FILE}

    #Install files
    find "$DIST/files/plugins" -type f -print0 \
        | xargs -0 "$SOPHOS_INSTALL/base/bin/versionedcopy" || failure ${EXIT_FAIL_VERSIONEDCOPY} "Failed to copy files to installation"

    ln -snf "${PLUGIN_INSTALL}/sbin/uninstall.sh" "${SOPHOS_INSTALL}/base/update/var/installedproducts/${PRODUCT_LINE_ID}.sh"
    ln -snf "${PLUGIN_INSTALL}/VERSION.ini" "${SOPHOS_INSTALL}/base/update/var/installedproductversions/${PRODUCT_LINE_ID}.ini"

    chmod 0751 "${PLUGIN_INSTALL}"
    chmod 0644 "${PLUGIN_INSTALL}/VERSION.ini"*
    chmod 0751 "${PLUGIN_INSTALL}/lib64"
    chmod 0755 "${PLUGIN_INSTALL}/lib64"/*
    # Lock down libraries which are not needed by avscanner
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libpluginimpl.so"*
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libscanscheduler.so"*
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libsophosthreatdetectorimpl.so"*
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libthreat_scanner.so"*
    chmod -R 0711 "${PLUGIN_INSTALL}/bin"
    chmod -R 0710 "${PLUGIN_INSTALL}/sbin"

    mkdir -p "$VAR"

    CHROOT="${PLUGIN_INSTALL}/chroot"
    CHROOT_LINK_DIR="${CHROOT}/${PLUGIN_INSTALL}"
    mkdir -p ${CHROOT_LINK_DIR}
    ln -snf / ${CHROOT_LINK_DIR}/chroot
    mkdir -p ${CHROOT}/${SOPHOS_INSTALL}/base/etc/
    mkdir -p ${CHROOT}/${SOPHOS_INSTALL}/base/update/var/
    chmod -R 0710 ${CHROOT}/${SOPHOS_INSTALL%%/*}
    chmod 0770 ${CHROOT_LINK_DIR}
    chmod 0770 ${CHROOT}/${SOPHOS_INSTALL}/base/etc/
    chmod 0770 ${CHROOT}/${SOPHOS_INSTALL}/base/update/var/
    mkdir -p ${CHROOT}/etc
    chmod 0770 ${CHROOT}/etc
    mkdir -p ${CHROOT}/tmp
    chmod 0770 ${CHROOT}/tmp
    mkdir -p ${CHROOT}/var
    chmod 0771 ${CHROOT}/var
    chmod 0711 ${CHROOT}

    chmod -R g+rX "${CHROOT}/susi"
    chmod 0770 "${CHROOT}/susi/version_manifest.txt"

    ## Create log directory symlinks for sophos_threat_detector
    mkdir -p "$CHROOT/log" "${PLUGIN_INSTALL}/log" "${CHROOT_LINK_DIR}/log"
    chmod 0770 "$CHROOT/log" "${PLUGIN_INSTALL}/log"
    ln -snf "$CHROOT/log" "${PLUGIN_INSTALL}/log/sophos_threat_detector"
    ln -snf "/log" "${CHROOT_LINK_DIR}/log/sophos_threat_detector"
    ln -snf "sophos_threat_detector/sophos_threat_detector.log" "${PLUGIN_INSTALL}/log/sophos_threat_detector.log"

    chown -R root:${GROUP_NAME} "${PLUGIN_INSTALL}"

    pushd "${PLUGIN_INSTALL}/sbin" || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to find sbin directory"
    THREAT_DETECTOR="sophos_threat_detector_launcher"
    [[ -h "$THREAT_DETECTOR" ]] && THREAT_DETECTOR=$(readlink "$THREAT_DETECTOR")
    [[ -f "$THREAT_DETECTOR" ]] && setcap cap_sys_chroot=eip "$THREAT_DETECTOR"
    SCHEDULED_FILE_WALKER="scheduled_file_walker_launcher"
    [[ -h "$SCHEDULED_FILE_WALKER" ]] && SCHEDULED_FILE_WALKER=$(readlink "$SCHEDULED_FILE_WALKER")
    [[ -f "$SCHEDULED_FILE_WALKER" ]] && setcap cap_dac_read_search=eip "$SCHEDULED_FILE_WALKER"
    popd || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to return from sbin directory"

    ln -snf "${PLUGIN_INSTALL}/bin/avscanner" /usr/local/bin/avscanner

    delete_removed_vdl
    generate_susi_package_manifest
    bootstrap_susi_from_update_source

    #After install start the plugin
    "${SOPHOS_INSTALL}/bin/wdctl" start "${PLUGIN_NAME}" || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start plugin ${PLUGIN_NAME}"

    cp "$DIST/manifest.dat" "${VAR}/manifest.dat" || failure ${EXIT_FAIL_COPY_MANIFEST} "Failed to copy manifest from install-set to installation"
}

function update_supplement()
{
    # Copy supplement updates
    find "$DIST/files/plugins/av/chroot/susi/update_source" -type f -print0 \
        | xargs -0 "$SOPHOS_INSTALL/base/bin/versionedcopy" || failure ${EXIT_FAIL_VERSIONEDCOPY} "Failed to copy files to installation"

    delete_removed_vdl
    generate_susi_package_manifest

    # reload sophos_threat_detector
    local PID=$(ps -C sophos_threat_d -o pid=)
    if [[ -n "$PID" ]]
    then
        kill -SIGUSR1 $PID
    else
        echo "sophos_threat_detector not running"
    fi
}

function supplement_only_update()
{
    if [[ -f "${VAR}/manifest.dat" ]]
    then
        cmp "$DIST/manifest.dat" "${VAR}/manifest.dat"
    else
        return 1
    fi
}

if supplement_only_update
then
    # no changes in product
    # supplement only update
    # if sophos_threat_detector is running, then send it a signal
    update_supplement
else
    install_product
fi
