#!/usr/bin/env bash

# Copyright 2018-2023 Sophos Limited. All rights reserved.

PLUGIN_NAME=@PLUGIN_NAME@
PRODUCT_LINE_ID="@PRODUCT_LINE_ID@"

EXIT_FAIL_CREATE_DIRECTORY=10
EXIT_FAIL_FIND_GROUPADD=11
EXIT_FAIL_ADD_GROUP=12
EXIT_FAIL_FIND_USERADD=13
EXIT_FAIL_ADDUSER=14
EXIT_FAIL_FIND_GETENT=15
EXIT_FAIL_WDCTL_FAILED_TO_COPY=16
EXIT_FAIL_WDCTL_FAILED_TO_START=17
EXIT_FAIL_VERSIONEDCOPY=20
EXIT_FAIL_INSTALL_PACKAGE=21
EXIT_FAIL_COPY_MANIFEST=22
EXIT_FAIL_DELETE_REMOVED_FILES=23
EXIT_FAIL_NONVERSIONEDCOPY=24
EXIT_FAIL_ACQUIRE_LOCK_FILE=25
EXIT_FAIL_MISSING_SUPPLEMENTS=26
EXIT_FAIL_MISSING_VERSIG=27
EXIT_FAIL_SUPPLEMENT_VERIFY_FAIL=28
EXIT_FAIL_RESTORE_THREAT_DB=29
EXIT_FAIL_RESTORE_SAFESTORE_DB=30
EXIT_FAIL_SET_CAPABILITIES=31

STARTINGDIR=$(pwd)
SCRIPTDIR=${0%/*}
if [[ "$SCRIPTDIR" == "$0" ]]
then
    SCRIPTDIR=${STARTINGDIR}
fi

ABS_SCRIPTDIR=$(cd $SCRIPTDIR && pwd)

source ${ABS_SCRIPTDIR}/cleanupinstall.sh
source ${ABS_SCRIPTDIR}/checkAndRunExtraUpgrade.sh

[[ -n "$SOPHOS_INSTALL" ]] || SOPHOS_INSTALL=/opt/sophos-spl
[[ -n "$DIST" ]] || DIST=$ABS_SCRIPTDIR
[[ -n "$LOCKFILE_TIMEOUT" ]] || LOCKFILE_TIMEOUT=60
[[ -n "$BASE_INSTALL_OPTIONS_FILE" ]] || BASE_INSTALL_OPTIONS_FILE="$SOPHOS_INSTALL/base/etc/install_options"

failure()
{
    local CODE=$1
    shift
    echo "$@" >&2
    exit $CODE
}
export DIST
export SOPHOS_INSTALL
export LD_LIBRARY_PATH="$SOPHOS_INSTALL/base/lib64"

USER_NAME=sophos-spl-av
GROUP_NAME=sophos-spl-group

THREAT_DETECTOR_USER=sophos-spl-threat-detector

# Use a safe umask while copying files before correcting permissions
umask 077

[[ -d $SOPHOS_INSTALL ]] || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to find installation directory: $SOPHOS_INSTALL"

# Verify supplements are present
[[ -d "$DIST/files/plugins/av/chroot/susi/update_source/vdl" ]] || failure ${EXIT_FAIL_MISSING_SUPPLEMENTS} "VDL supplement missing"
[[ -d "$DIST/files/plugins/av/chroot/susi/update_source/reputation" ]] || failure ${EXIT_FAIL_MISSING_SUPPLEMENTS} "Local Reputation supplement missing"
[[ -d "$DIST/files/plugins/av/chroot/susi/update_source/model" ]] || failure ${EXIT_FAIL_MISSING_SUPPLEMENTS} "Machine Learning supplement missing"

# Verify supplement manifest files
VERSIG=$SOPHOS_INSTALL/base/update/versig
[[ -x $VERSIG ]] || failure ${EXIT_FAIL_MISSING_VERSIG} "Failed to find signature verifier in SSPL"
ROOT_CA=$SOPHOS_INSTALL/base/update/rootcerts/rootca.crt
[[ -f $ROOT_CA ]] || failure ${EXIT_FAIL_MISSING_VERSIG} "Failed to find root CA in SSPL"
SUPPLEMENT_DIR="$DIST/files/plugins/av/chroot/susi/update_source"
VDL="$SUPPLEMENT_DIR/vdl"
DATASETA_MANIFEST="$VDL/manifestdata.dat"
ML_MODEL="$SUPPLEMENT_DIR/model"
$VERSIG -c"$SOPHOS_INSTALL/base/update/rootcerts" -f"$ML_MODEL/manifest.dat" -d"$ML_MODEL" \
    --no-require-sha256 \
    --allow-sha1-signature \
    $VERSIG_OPTIONS || \
  $VERSIG -c"$ROOT_CA" -f"$ML_MODEL/manifest.dat" -d"$ML_MODEL" \
    $VERSIG_OPTIONS || \
     failure ${EXIT_FAIL_SUPPLEMENT_VERIFY_FAIL} "Failed to verify Machine Learning supplement"

SETCAP="$(which setcap)"
[[ -x "${SETCAP}" ]] || SETCAP=/sbin/setcap
[[ -x "${SETCAP}" ]] || SETCAP=/usr/sbin/setcap
[[ -x "${SETCAP}" ]] || failure ${EXIT_FAIL_INSTALL_PACKAGE} "Failed to install as setcap is not installed, please see https://support.sophos.com/support/s/article/KB-000041952"

PLUGIN_INSTALL="${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}"
VAR="${PLUGIN_INSTALL}/var"
SUSI_UPDATE_SRC="$SOPHOS_INSTALL/plugins/av/chroot/susi/update_source/"
SUSI_DIST_VERS="$SOPHOS_INSTALL/plugins/av/chroot/susi/distribution_version/"
LOCKFILE="${PLUGIN_INSTALL}/chroot/var/susi_update.lock"
TD_PID_FILE="${PLUGIN_INSTALL}/chroot/var/threat_detector.pid"
SAFESTORE_DB_PATH="${PLUGIN_INSTALL}/var/safestore_db"

function delete_removed_vdl()
{
    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/vdl"
    local dest_dir="${SUSI_UPDATE_SRC}/vdl"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" --notVersioned || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed files"
}

function delete_removed_libraries()
{
    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/libglobalrep"
    local dest_dir="${SUSI_UPDATE_SRC}/libglobalrep"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed libglobalrep files"

    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/libsavi"
    local dest_dir="${SUSI_UPDATE_SRC}/libsavi"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed libsavi files"

    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/libsophtainer"
    local dest_dir="${SUSI_UPDATE_SRC}/libsophtainer"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed libsophtainer files"

    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/libupdater"
    local dest_dir="${SUSI_UPDATE_SRC}/libupdater"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed libupdater files"

    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/lrlib"
    local dest_dir="${SUSI_UPDATE_SRC}/lrlib"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed lrlib files"

    local dest_dir="${SUSI_UPDATE_SRC}/mllib"
    rm -rf "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed mllib files"

    local src_dir="$DIST/files/plugins/av/chroot/susi/update_source/susicore"
    local dest_dir="${SUSI_UPDATE_SRC}/susicore"

    $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$src_dir" "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed susicore files"
}

function generate_susi_package_manifest()
{
    local nonsupplement_manifest="${SUSI_UPDATE_SRC}/nonsupplement_manifest.txt"
    local temp_manifest="${SUSI_UPDATE_SRC}/temp_manifest.txt"
    local package_manifest="${SUSI_UPDATE_SRC}/package_manifest.txt"
    cp ${nonsupplement_manifest} ${temp_manifest}

    vdl_hash=$(sha256sum "$DATASETA_MANIFEST" | awk '{print $1}')
    echo "vdl ${vdl_hash}" >> ${temp_manifest}

    model_hash=$(sha256sum ${SUSI_UPDATE_SRC}/model/manifest.dat | awk '{print $1}')
    echo "model ${model_hash}" >> ${temp_manifest}

    lrdata_hash=$(cat ${SUSI_UPDATE_SRC}/reputation/filerep.dat ${SUSI_UPDATE_SRC}/reputation/signerrep.dat | sha256sum | awk '{print $1}')
    echo "reputation ${lrdata_hash}" >> ${temp_manifest}

    libupdater_hash=$(sha256sum ${SUSI_UPDATE_SRC}/libupdater/libupdater.so | awk '{print $1}')
    echo "libupdater ${libupdater_hash}" >> ${temp_manifest}

    manifest_hash=$(sha256sum ${temp_manifest} | awk '{print $1}')
    echo $manifest_hash > $package_manifest
    cat $temp_manifest >> $package_manifest

    set_permissions_on_susi_update_source
}

function set_permissions_on_susi_update_source()
{
    chown -R root:${GROUP_NAME} "${SUSI_UPDATE_SRC}"
    chmod 750 "${SUSI_UPDATE_SRC}"
    chmod -R u=rwX,g=rX,o= "${SUSI_UPDATE_SRC}"
    chmod -R u=rwx,g=rX,o= \
        "${SUSI_UPDATE_SRC}/susicore" \
        "${SUSI_UPDATE_SRC}/libglobalrep" \
        "${SUSI_UPDATE_SRC}/libsophtainer" \
        "${SUSI_UPDATE_SRC}/lrlib" \
        "${SUSI_UPDATE_SRC}/libsavi" \
        "${SUSI_UPDATE_SRC}/libupdater"
}

function already_installed()
{
    [[ -f "${SOPHOS_INSTALL}/base/pluginRegistry/$1.json" ]]
}

function av_already_installed()
{
    already_installed "${PLUGIN_NAME}"
}

function threat_detector_already_installed()
{
    already_installed "threat_detector"
}

function apply_permissions()
{
    chmod 0751 "${PLUGIN_INSTALL}"
    chown root:${GROUP_NAME} "${PLUGIN_INSTALL}"

    chmod 0644 "${PLUGIN_INSTALL}/VERSION.ini"*
    chown root:${GROUP_NAME} "${PLUGIN_INSTALL}/VERSION.ini"

    chmod 0751 "${PLUGIN_INSTALL}/lib64"
    chmod 0755 "${PLUGIN_INSTALL}/lib64"/*
    # Lock down libraries which are not needed by avscanner
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libpluginimpl.so"*
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libscanscheduler.so"*
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libsophosthreatdetectorimpl.so"*
    chmod 0750 "${PLUGIN_INSTALL}/lib64/libthreat_scanner.so"*
    chown -R root:${GROUP_NAME} "${PLUGIN_INSTALL}/lib64"

    chmod -R 0711 "${PLUGIN_INSTALL}/bin"
    chown -R root:${GROUP_NAME} "${PLUGIN_INSTALL}/bin"

    chmod -R 0710 "${PLUGIN_INSTALL}/sbin"
    chown -R root:${GROUP_NAME} "${PLUGIN_INSTALL}/sbin"

    mkdir -p "${PLUGIN_INSTALL}/log"
    chmod 0770 "${PLUGIN_INSTALL}/log"
    chown -R ${USER_NAME}:${GROUP_NAME} "${PLUGIN_INSTALL}/log"
    # Also change ownership of sophos_threat_detector log which gets missed by above chown
    if [[ -f "${PLUGIN_INSTALL}/log/sophos_threat_detector/sophos_threat_detector.log" ]]
    then
        chown ${USER_NAME}:${GROUP_NAME} "${PLUGIN_INSTALL}/log/sophos_threat_detector/sophos_threat_detector.log"
    fi

    chown root:${GROUP_NAME} "${PLUGIN_INSTALL}/log"

    mkdir -p "${VAR}"
    chmod 0770 "${VAR}"
    chmod -R g+r "${VAR}"
    chmod +t "${VAR}"
    chown root:${GROUP_NAME} "${VAR}"

    if [[ -f "${VAR}/persist-threatDatabase" ]]
    then
        chmod 600 ${VAR}/persist-threatDatabase
        chown ${USER_NAME}:${GROUP_NAME} ${VAR}/persist-threatDatabase
    fi

    mkdir -p "$SAFESTORE_DB_PATH"
    chown -R root:root "${SAFESTORE_DB_PATH}"
    [[ "$(ls -A "${SAFESTORE_DB_PATH}")" ]] && chmod -R 0400 "${SAFESTORE_DB_PATH}"
    chmod 0700 "${SAFESTORE_DB_PATH}"
    [[ -f "${SAFESTORE_DB_PATH}/safestore.db" ]] && chmod 0600 "${SAFESTORE_DB_PATH}/safestore.db"
    [[ -f "${SAFESTORE_DB_PATH}/safestore.pw" ]] && chmod 0600 "${SAFESTORE_DB_PATH}/safestore.pw"

    CHROOT="${PLUGIN_INSTALL}/chroot"
    CHROOT_LINK_DIR="${CHROOT}/${PLUGIN_INSTALL#/}"
    mkdir -p ${CHROOT_LINK_DIR}
    chmod 0770 ${CHROOT_LINK_DIR}
    chmod 0710 ${CHROOT_LINK_DIR%/*}
    ln -snf / ${CHROOT_LINK_DIR}/chroot

    mkdir ${CHROOT_LINK_DIR}/sbin
    chmod 755 ${CHROOT_LINK_DIR}/sbin

    chmod -R 0750 "${CHROOT}/lib64"
    chown -R root:${GROUP_NAME} "${CHROOT}/lib64"

    mkdir -p "${CHROOT_LINK_DIR}/log"
    chmod 0770 "${CHROOT_LINK_DIR}/log"
    chown root:${GROUP_NAME} "${CHROOT_LINK_DIR}/log"

    mkdir -p "${CHROOT_LINK_DIR}/var"
    chmod 0770 "${CHROOT_LINK_DIR}/var"
    chown root:${GROUP_NAME} "${CHROOT_LINK_DIR}/var"

    mkdir -p ${CHROOT}/${SOPHOS_INSTALL}/base/etc/
    mkdir -p ${CHROOT}/${SOPHOS_INSTALL}/base/update/var/

    p=${CHROOT}/${SOPHOS_INSTALL#/}/base/update
    while [[ $p == ${CHROOT}/* ]]
    do
      chmod 0710 $p
      chown root:${GROUP_NAME} $p
      p=${p%/*}
    done

    chmod 0770 ${CHROOT}/${SOPHOS_INSTALL}/base/etc/
    chown -R ${THREAT_DETECTOR_USER}:${GROUP_NAME} ${CHROOT}/${SOPHOS_INSTALL}
    chown -R ${USER_NAME}:${GROUP_NAME} "${CHROOT_LINK_DIR}/var"
    chmod -R g+r "${CHROOT_LINK_DIR}/var"
    chmod 0770 ${CHROOT}/${SOPHOS_INSTALL}/base/update/var/
    find ${CHROOT}/${SOPHOS_INSTALL} -type d -exec chown root:${GROUP_NAME} {} \;

    mkdir -p ${CHROOT}/etc
    chmod 0770 ${CHROOT}/etc
    chown -R ${THREAT_DETECTOR_USER}:${GROUP_NAME} "${CHROOT}/etc"
    chown root:${GROUP_NAME} "${CHROOT}/etc"

    mkdir -p "${CHROOT}/log"
    chmod 0770 "${CHROOT}/log"
    chown -R ${THREAT_DETECTOR_USER}:${GROUP_NAME} "${CHROOT}/log"
    chown root:${GROUP_NAME} "${CHROOT}/log"

    chmod 0710 ${CHROOT}/susi
    chown ${THREAT_DETECTOR_USER}:${GROUP_NAME} "${CHROOT}/susi"

    set_permissions_on_susi_update_source

    mkdir -p ${CHROOT}/tmp
    chmod 0770 ${CHROOT}/tmp
    chown root:${GROUP_NAME} "${CHROOT}/tmp"

    mkdir -p ${CHROOT}/var
    chmod 0771 ${CHROOT}/var
    chown -R ${USER_NAME}:${GROUP_NAME} "${CHROOT}/var"
    chown root:${GROUP_NAME} "${CHROOT}/var"
    touch ${LOCKFILE}
    chown ${THREAT_DETECTOR_USER}:${GROUP_NAME} ${LOCKFILE}
    if [[ -f ${TD_PID_FILE} ]]
    then
        chown ${THREAT_DETECTOR_USER}:${GROUP_NAME} ${TD_PID_FILE}
        chmod 640 ${TD_PID_FILE}
    fi

    chmod 0711 ${CHROOT}
    chown root:${GROUP_NAME} "${CHROOT}"
}

function create_registration_file()
{
  local NAME=$1
  local TEMP_REG_FILE=${SOPHOS_INSTALL}/tmp/${NAME}.json
  sed "s;SOPHOS_INSTALL_VALUE;${SOPHOS_INSTALL};g" "${DIST}/files/base/pluginRegistry/${NAME}.json" > "${TEMP_REG_FILE}"
  "${SOPHOS_INSTALL}/bin/wdctl" copyPluginRegistration "${TEMP_REG_FILE}" || failure ${EXIT_FAIL_WDCTL_FAILED_TO_COPY} "Failed to copy registration ${TEMP_REG_FILE}"
  rm -f ${TEMP_REG_FILE}
}

function restore_safestore_databases()
{
  SAFESTORE_RESTORE_DIR="${VAR}/downgrade-backup"

  if [[ -f "${SAFESTORE_RESTORE_DIR}/persist-threatDatabase" ]]
  then
    mv "${SAFESTORE_RESTORE_DIR}/persist-threatDatabase" "${VAR}/persist-threatDatabase" || failure $EXIT_FAIL_RESTORE_THREAT_DB "Failed to restore threat database"
  fi

  SAFESTORE_DATABASES=$(find ${SAFESTORE_RESTORE_DIR} -name "*_SafeStore_*")

  IFS=' ' read -r -a PRODUCT_VERSION <<< $(grep PRODUCT_VERSION "${PLUGIN_INSTALL}/VERSION.ini") && unset IFS
  CURRENT_AV_VERSION=${PRODUCT_VERSION[2]}

  COMPATIBLE_SAFESTORE_DBS=()
  for SAFESTORE_DB in $SAFESTORE_DATABASES
  do
    IFS='_' read -r -a DB_NAME <<< $(basename -- "$SAFESTORE_DB") && unset IFS

    if [[ $CURRENT_AV_VERSION < ${DB_NAME[2]} ]]
    then
      echo "SafeStore Database ($(readlink -f "$SAFESTORE_DB")) is not compatible with the current AV version ($CURRENT_AV_VERSION) so will not attempt to restore"
    else
      COMPATIBLE_SAFESTORE_DBS+=("$SAFESTORE_DB")
    fi
  done

  IFS=$'\n' sorted=($(sort -r <<<"${COMPATIBLE_SAFESTORE_DBS[*]}")) && unset IFS
  DATABASE_TO_RESTORE=$(readlink -f "${sorted[0]}")

  if [[ -d "$DATABASE_TO_RESTORE" ]]
  then
    echo "Attempting to restore old SafeStore database: $DATABASE_TO_RESTORE"
    if [[ -d "${SAFESTORE_DB_PATH}" ]]
    then
      echo "SafeStore database already exists so will not attempt to restore: $DATABASE_TO_RESTORE"
    else
      mv -v "$DATABASE_TO_RESTORE" "${SAFESTORE_DB_PATH}" || failed $EXIT_FAIL_RESTORE_SAFESTORE_DB "Failed to restore old SafeStore database: $DATABASE_TO_RESTORE"
      if [[ -z "$(ls -A $SAFESTORE_RESTORE_DIR)" ]]
      then
         rm -rf "$SAFESTORE_RESTORE_DIR"
      fi
      echo "Successfully restored old SafeStore database ($DATABASE_TO_RESTORE) to ${SAFESTORE_DB_PATH}"
    fi
  fi
}

function add_user()
{
  local username="$1"
  local groupname="$2"
  local args=" ${@:3}"

  if [[ -f "$BASE_INSTALL_OPTIONS_FILE" ]]
  then
    while read -r line; do
      if [[ "$line" =~ ^--user-ids-to-configure=?(.*)$ ]]
        then
          IFS=',' read -ra UIDS_ARRAY <<< "${line/*=/}"
          for uid in "${UIDS_ARRAY[@]}";
          do
            if [[ "${uid%%:*}" == "$username" ]]
            then
              userId="-u ${uid#*:}"
              break
            fi
          done
      fi
    done <"$BASE_INSTALL_OPTIONS_FILE"
  fi

  userAddCmd="${USERADD} ${username} --no-create-home --no-user-group --gid ${groupname} --system --shell=/bin/false --home-dir=${SOPHOS_INSTALL}${args}"
  if [[ -z "$("${GETENT}" passwd "${username}")" ]]
  then
    if [[ -z "${userId}" ]]
      then
         ${userAddCmd} || failure ${EXIT_FAIL_ADDUSER} "Failed to add user ${username}"
      else
        ${userAddCmd} "${userId}" || ${userAddCmd} || failure ${EXIT_FAIL_ADDUSER} "Failed to add user ${username}"
      fi
  fi
}

function install_product()
{
    GETENT=/usr/bin/getent
    [[ -x "${GETENT}" ]] || GETENT=$(which getent)
    [[ -x "${GETENT}" ]] || failure ${EXIT_FAIL_FIND_GETENT} "Failed to find getent"

    USERADD="$(which useradd)"
    [[ -x "${USERADD}" ]] || USERADD=/usr/sbin/useradd
    [[ -x "${USERADD}" ]] || failure ${EXIT_FAIL_FIND_USERADD} "Failed to find useradd to add low-privilege user"

    add_user ${USER_NAME} ${GROUP_NAME} --groups sophos-spl-ipc
    add_user ${THREAT_DETECTOR_USER} ${GROUP_NAME}

    if av_already_installed
    then
        "${SOPHOS_INSTALL}/bin/wdctl" stop "${PLUGIN_NAME}" --quiet &>/dev/null || echo Failed to stop plugin: ${PLUGIN_NAME}
        # Wait up to 10 seconds for AV Plugin to stop before changing ownership of log files etc
        timeout 10 tail --pid=$(pgrep -G ${GROUP_NAME} av) -f /dev/null 2> /dev/null
    fi

    if threat_detector_already_installed
    then
        "${SOPHOS_INSTALL}/bin/wdctl" stop "threat_detector" --quiet &>/dev/null || echo Failed to stop the threat detector
        # Wait up to 10 seconds for threat_detector to stop before changing ownership of log files etc
        timeout 10 tail --pid=$(pgrep -G ${GROUP_NAME} sophos_threat_d) -f /dev/null 2> /dev/null
    fi

    if already_installed on_access_process
    then
        "${SOPHOS_INSTALL}/bin/wdctl" stop "on_access_process" --quiet &>/dev/null || echo Failed to stop OnAccessProcess
    fi

    if already_installed safestore
    then
        "${SOPHOS_INSTALL}/bin/wdctl" stop "safestore" --quiet &>/dev/null || echo Failed to stop SafeStore
    fi

    check_for_upgrade  "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/VERSION.ini" ${PRODUCT_LINE_ID} ${DIST}

    #Install files using versioned copy (apart from SUSI)
    find "$DIST/files/plugins" -type f -not -path "$DIST/files/plugins/av/chroot/susi/*" -print0 \
        | xargs -0 "$SOPHOS_INSTALL/base/bin/versionedcopy" || failure ${EXIT_FAIL_VERSIONEDCOPY} "Failed to copy files to installation"

    run_upgrade  ${PRODUCT_LINE_ID}

    generate_manifest_diff "${DIST}" "${PRODUCT_LINE_ID}"

    if [[ -e "$SOPHOS_INSTALL/plugins/av/chroot/susi" ]]
    then
        delete_removed_libraries
    fi

    #LINUXDAR-5935 removed libsusi and libupdater from av/lib64, we don't need to keep a copy of them anymore. Affects only upgrades
    rm -f "$SOPHOS_INSTALL/plugins/av/lib64/libsusi.so*"
    rm -f "$SOPHOS_INSTALL/plugins/av/lib64/libupdater.so*"

    #Install SUSI
    [ -e "$SOPHOS_INSTALL/plugins/av/chroot/susi/update_source/vdl" ] && rm "$SOPHOS_INSTALL/plugins/av/chroot/susi/update_source/vdl/"*
    mkdir -p "$SOPHOS_INSTALL/plugins/av/chroot/susi"
    cp -arfv $DIST/files/plugins/av/chroot/susi/* "$SOPHOS_INSTALL/plugins/av/chroot/susi" || failure ${EXIT_FAIL_NONVERSIONEDCOPY} "Failed to copy SUSI files to installation"

    #Install SUSI libraries (with version copy)
    find "$DIST/files/plugins/av/chroot/susi" -type f -name "*.so.*" -print0 \
        | xargs -0 "$SOPHOS_INSTALL/base/bin/versionedcopy" || failure ${EXIT_FAIL_VERSIONEDCOPY} "Failed to SUSI libraries to installation"

    local dest_dir="${SUSI_UPDATE_SRC}/mllib"
    rm -rf "$dest_dir" || failure $EXIT_FAIL_DELETE_REMOVED_FILES "Unable to delete removed mllib files"

    ln -snf "${PLUGIN_INSTALL}/sbin/uninstall.sh" "${SOPHOS_INSTALL}/base/update/var/installedproducts/${PRODUCT_LINE_ID}.sh"
    ln -snf "${PLUGIN_INSTALL}/VERSION.ini" "${SOPHOS_INSTALL}/base/update/var/installedproductversions/${PRODUCT_LINE_ID}.ini"

    [[ -d "${VAR}/downgrade-backup" ]] && restore_safestore_databases

    if software_changed "${DIST}" "${PRODUCT_LINE_ID}"
    then
        perform_cleanup "${DIST}" "${PRODUCT_LINE_ID}"
    fi
    copy_manifests "${DIST}" "${PRODUCT_LINE_ID}"

    apply_permissions

    ## Create logging symlinks for sophos_threat_detector
    ln -snf "$CHROOT/log" "${PLUGIN_INSTALL}/log/sophos_threat_detector"
    BACKLINK="$(echo "${PLUGIN_INSTALL%/}" | sed -e "s:[^/]*:..:g;s:^/::")"
    ln -snf "${BACKLINK}/log" "${CHROOT_LINK_DIR}/log/sophos_threat_detector" \
        ||  failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create symlink ${CHROOT_LINK_DIR}/log/sophos_threat_detector: $?"
    ## LINUXDAR-3138 If sophos_threat_detector.log symlink exists following upgrade, delete it
    [ -L "${PLUGIN_INSTALL}/log/sophos_threat_detector.log" ] && rm "${PLUGIN_INSTALL}/log/sophos_threat_detector.log"

    chmod 0100 "$DIST/setCapabilities.sh"
    "$DIST/setCapabilities.sh" || failure ${EXIT_FAIL_SET_CAPABILITIES} "Failed to set capabilities"

    ln -snf "${PLUGIN_INSTALL}/bin/avscanner" /usr/local/bin/avscanner

    generate_susi_package_manifest

    #Create plugin registration files
    create_registration_file "${PLUGIN_NAME}"
    create_registration_file "threat_detector"
    create_registration_file "on_access_process"
    create_registration_file "safestore"

    # start av processes
    "${SOPHOS_INSTALL}/bin/wdctl" start threat_detector --quiet || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start sophos_threat_detector"
    "${SOPHOS_INSTALL}/bin/wdctl" start on_access_process --quiet || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start sophos on-access process"
    "${SOPHOS_INSTALL}/bin/wdctl" start safestore --quiet || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start SafeStore"

    # Start AV Plugin last, so that health is less likely to break
    "${SOPHOS_INSTALL}/bin/wdctl" start "${PLUGIN_NAME}" --quiet || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start plugin ${PLUGIN_NAME}"

    cp "$DIST/manifest.dat" "${VAR}/manifest.dat" || failure ${EXIT_FAIL_COPY_MANIFEST} "Failed to copy manifest from install-set to installation"
}

function update_supplement()
{
    # Copy supplement updates
    touch $LOCKFILE
    exec {FD}<>$LOCKFILE

    if ! flock -x -w $LOCKFILE_TIMEOUT $FD; then
        failure ${EXIT_FAIL_ACQUIRE_LOCK_FILE} "Failed to obtain a lock on $LOCKFILE within $LOCKFILE_TIMEOUT seconds"
    else
        echo "Lock acquired on $LOCKFILE"
        UPDATE_SRC="plugins/av/chroot/susi/update_source"

        $SOPHOS_INSTALL/plugins/av/sbin/sync_versioned_files "$DIST/files/$UPDATE_SRC/vdl" "$SOPHOS_INSTALL/$UPDATE_SRC/vdl" --copy \
            || failure ${EXIT_FAIL_NONVERSIONEDCOPY} "Failed to copy Virus Data to installation"

        cp -auv "$DIST/files/$UPDATE_SRC/model/"* "$SOPHOS_INSTALL/$UPDATE_SRC/model/" || failure ${EXIT_FAIL_NONVERSIONEDCOPY} "Failed to copy ML Model to installation"
        cp -auv "$DIST/files/$UPDATE_SRC/reputation/"* "$SOPHOS_INSTALL/$UPDATE_SRC/reputation/" || failure ${EXIT_FAIL_NONVERSIONEDCOPY} "Failed to copy Local reputation data to installation"
        cp -auv "$DIST/files/$UPDATE_SRC/rules/"* "$SOPHOS_INSTALL/$UPDATE_SRC/rules/" || failure ${EXIT_FAIL_NONVERSIONEDCOPY} "Failed to copy LUA files to installation"
        set_permissions_on_susi_update_source

    fi

    generate_susi_package_manifest

    # update sophos_threat_detector
    local PID=$(pgrep -G ${GROUP_NAME} sophos_threat_d)
    if [[ -n "$PID" ]]
    then
        kill -SIGUSR1 $PID
    else
        echo "sophos_threat_detector not running"
    fi
}

function supplement_only_update()
{
    if [[ -f "${VAR}/manifest.dat" ]]
    then
        cmp "$DIST/manifest.dat" "${VAR}/manifest.dat"
    else
        return 1
    fi
}

if supplement_only_update
then
    # no changes in product
    # supplement only update
    # if sophos_threat_detector is running, then send it a signal
    update_supplement
else
    install_product
fi
