def buildAndTest()
{
    withEnv(['PATH+CMAKE=/usr/local/bin:/redist/binaries/everest/cmake/bin']){
        checkout scm
        sh 'rm -rf /tmp/temp*'
        sh 'rm -rf build64 && mkdir -p build64 && cd build64 && cmake .. && make && make install && make dist'
        // Timeout applies to each individual test. Stops hanging tests from hanging the build.
        sh 'cd build64 && ctest -V -T test --no-compress-output --timeout 60'
    }
}

def copyAndTest()
{
    withEnv(['PATH+CMAKE=/usr/local/bin:/redist/binaries/everest/cmake/bin']){
        //checkout scm
        //sh 'rm -rf /tmp/temp*'
        //sh 'rm -rf build64 && mkdir -p build64 && cd build64 && cmake .. && make && make install && make dist'
        sh 'cd .. && rm -rf ${BRANCH_NAME} && cp -r /mnt/filer6/SSPL/JenkinsBuildOutput/{$BRANCH_NAME} {$BRANCH_NAME}'
        // Timeout applies to each individual test. Stops hanging tests from hanging the build.
        sh 'cd build64 && ctest -V -T test --no-compress-output --timeout 60'
    }
}

def copyBuild()
{
    sh 'rm -rf /mnt/filer6/SSPL/JenkinsBuildOutput/{$BRANCH_NAME}'
    sh 'cp -r ../${BRANCH_NAME} /mnt/filer6/SSPL/JenkinsBuildOutput/{$BRANCH_NAME}'
}

def processTestResults(osName)
{
    sh 'cd build64 && cp Testing/`head -n 1 Testing/TAG`/Test.xml ./CTestResults.xml'
    // Change the top level "tests" directory to the OS name, so that you browse results by OS in Jenkins
    sh 'sed -i "s_/tests/_/' + osName + '/_g" build64/CTestResults.xml'
    // Thresholds will not pick up tests that have timed out unfortunately.
    xunit testTimeMargin: '3000', thresholdMode: 2, thresholds: [failed(failureNewThreshold: '0', failureThreshold: '0', unstableNewThreshold: '0', unstableThreshold: '0'), skipped(failureNewThreshold: '100', failureThreshold: '100', unstableNewThreshold: '100', unstableThreshold: '100')], tools: [CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build64/CTestResults.xml', skipNoTestFiles: false, stopProcessingIfError: true)]
}

pipeline {
    agent none
    environment {
            // Set library path, as build machines need new GCC, SUL, Boost and openssl.
            LD_LIBRARY_PATH='/redist/binaries/linux11/input/openssl/lib64:/redist/binaries/linux11/input/SUL/lib64:/redist/binaries/linux11/input/boost/lib64:/redist/binaries/linux11/input/protobuf/install64/lib/:/usr/local/lib64:$LD_LIBRARY_PATH'
     }
    stages {
        stage('Build on Centos Build Machine') {
            agent {
                node {
                    label 'centos-jenkins-builder'
                    // Custom Workspace needed so system tests know where to look for base
                    customWorkspace "EverestBase/${BRANCH_NAME}"
                }
            }
            steps {
                buildAndTest()
            }
            post {
                success {
                    copyBuild()
                }
                always {
                    processTestResults("CentOS Builder")
                }
            }
        }
        stage('Tests') {
            parallel {
                stage('Build on Ubuntu') {
                    agent {
                        node {
                            label 'ubuntu1804'
                            // Custom Workspace needed so system tests know where to look for base
                            customWorkspace "EverestBase/${BRANCH_NAME}"
                        }
                    }
                    steps {
                        copyAndTest()
                    }
                    post {
                        always {
                            processTestResults("Ubuntu")
                        }
                    }
                }
                stage('Build on CentOS') {
                    agent {
                        node {
                            label 'centos7'
                            customWorkspace "EverestBase/${BRANCH_NAME}"
                        }
                    }
                    steps {
                        copyAndTest()
                    }
                    post {
                        always {
                            processTestResults("CentOS")
                        }
                    }
                }
                stage('Build on Redhat') {
                    agent {
                        node {
                            label 'rhel7'
                            customWorkspace "EverestBase/${BRANCH_NAME}"
                        }
                    }
                    steps {
                        copyAndTest()
                    }
                    post {
                        always {
                            processTestResults("RHEL")
                        }
                    }
                }
            }
        }
    }
}