# Copyright 2023 Sophos Limited. All rights reserved.
load("//tools/config:soph_cc_rules.bzl", "soph_cc_binary")
load("//tools/config:zip.bzl", "zip_asset")
load("//tools/config:expand_template.bzl", "expand_template")
load("//tools/config:copy_file.bzl", "copy_file")
load("//common:common_substitutions.bzl", "USER_AND_GROUP_SUBSTITUTIONS")
load("//common:filter_files.bzl", "filter_files")
load("//base:version_info.bzl", "BASE_BASE_VERSION", "BASE_LINE_ID", "BASE_PRODUCT_NAME", "BASE_VERSIONING_COMPONENT_NAME")
load("//common:spl_sdds_packages.bzl", "spl_sdds_packages")
load("@gcc//:glibc.bzl", "GLIBC_VERSION")

soph_cc_binary(
    name = "machineid",
    srcs = ["MachineIDMain.cpp"],
    deps = [
        "//base/modules/Installer/MachineId",
        "//common/modules/Common/Main",
    ],
)

soph_cc_binary(
    name = "manifestdiff",
    srcs = ["ManifestDiffMain.cpp"],
    deps = [
        "//base/modules/Installer/ManifestDiff",
        "//common/modules/Common/Main",
    ],
)

soph_cc_binary(
    name = "versionedcopy",
    srcs = ["VersionedCopyMain.cpp"],
    deps = [
        "//base/modules/Installer/VersionedCopy",
        "//common/modules/Common/Main",
    ],
)

expand_template(
    name = "install_sh",
    out = "install.sh.tmp",
    substitutions = USER_AND_GROUP_SUBSTITUTIONS | {
        "@INSTALL_ADJUST@": "",
        "@BUILD_SYSTEM_LIBC_VERSION@": GLIBC_VERSION,
    },
    template = "install.in.sh",
)

expand_template(
    name = "uninstall_sh",
    out = "uninstall.sh",
    substitutions = USER_AND_GROUP_SUBSTITUTIONS,
    template = "uninstall.in.sh",
)

copy_file(
    name = "ps_rootca_crt",
    src = "rootca.crt",
    out = "ps_rootca.crt",
)

filter_files(
    name = "python_standard_libs",
    srcs = ["//imports/thirdparty/python:libraries"],
    disallowed_suffixes = [
        ".exe",  # unsigned .exe files are not allowed by CI
        ".whl",  # may contain ".exe"s, they are not needed anyway
        ".o",  # not allowed in CI
    ],
    include_runfiles = True,
)

zip_asset(
    name = "python_standard_libs_zip",
    srcs = [":python_standard_libs"],
    strip_prefix = select({
        "@bazel_tools//src/conditions:linux_x86_64": "/imports/thirdparty/python/x64/lib/python3.11",
        "@bazel_tools//src/conditions:linux_aarch64": "/imports/thirdparty/python/arm64/lib/python3.11",
    }),
)

genrule(
    name = "create_empty_file_to_create_lib_dynload_directory",
    outs = ["empty_file_to_create_lib_dynload_directory"],
    cmd = "echo 'ensure lib-dynload directory is created' > $@",
)

filter_files(
    name = "filter_sseclient_py",
    srcs = ["@pip_deps_spl_sseclient//:pkg"],
    allowed_prefixes = ["external/pip_deps_spl_sseclient/site-packages/sseclient.py"],
)

genrule(
    name = "patched_sseclient",
    srcs = [":filter_sseclient_py"],
    outs = ["sseclient.py"],
    cmd = "sed 's/StopIteration, //' $< > $@",
    # Ideally we'd do this with a patch command, but it is unavailable on the CI template currently
    #    # Need to copy the file to allow patching it as it can be a symlink
    #    cmd = "cp $< before; patch -o $@ before $(location //base/build:sseclient.patch); rm before",
    #    tools = ["//base/build:sseclient.patch"],
)

PYTHON_VERSION = "3.11"

python_thirdparties = [
    "certifi",
    "chardet",
    "idna",
    "pathtools",
    "requests",
    "six",
    "sseclient",
    "urllib3",
    "watchdog",
]

filter_files(
    name = "mcsrouter_deps",
    srcs = [
        "@pip_deps_spl_{}//:pkg".format(thirdparty)
        for thirdparty in python_thirdparties
    ] + select({
        "@bazel_tools//src/conditions:linux_x86_64": ["@pip_deps_spl_x64_pycryptodome//:pkg"],
        "@bazel_tools//src/conditions:linux_aarch64": ["@pip_deps_spl_arm64_pycryptodome//:pkg"],
    }),
    disallowed_prefixes = [
        "external/pip_deps_spl_{}/site-packages/__init__.py".format(thirdparty)
        for thirdparty in python_thirdparties
    ] + [
        "external/pip_deps_spl_x64_pycryptodome/site-packages/__init__.py",
        "external/pip_deps_spl_arm64_pycryptodome/site-packages/__init__.py",
    ] + [
        # Exclude dist-info directories, '-' catches them
        "external/pip_deps_spl_{}/site-packages/{}-".format(thirdparty, thirdparty)
        for thirdparty in python_thirdparties
    ] + [
        "external/pip_deps_spl_x64_pycryptodome/site-packages/pycryptodome-",
        "external/pip_deps_spl_arm64_pycryptodome/site-packages/pycryptodome-",
    ] + [
        # Exclude as we want to patch it
        "external/pip_deps_spl_sseclient/site-packages/sseclient.py",
    ],
    disallowed_suffixes = [
        ".pyi",
    ],
    include_runfiles = True,  # Needed because the python :pkg targets split some of the files into runfiles
)

genrule(
    name = "telemetry_config",
    srcs = [
        "//base/build:dev-telemetry-config.json",
        "//base/build:prod-telemetry-config.json",
        "//build:SOURCE_CODE_BRANCH",
    ],
    outs = [
        "telemetry-config.json",
    ],
    cmd_bash = "if [[ $$(cat $(location //build:SOURCE_CODE_BRANCH)) =~ ^release/ ]]; then cp $(location //base/build:prod-telemetry-config.json) $@; else cp $(location //base/build:dev-telemetry-config.json) $@; fi",
)

spl_sdds_packages(
    name = "installer",
    base_version = BASE_BASE_VERSION,
    component_name = BASE_PRODUCT_NAME,
    line_id = BASE_LINE_ID,
    spv_features = ["CORE"],
    spv_roles = ["SAU"],
    spv_target_types = ["ENDPOINT"],
    srcs_remapped = {
        ":mcsrouter_deps": ",".join([
            "../pip_deps_spl_{} -> files/base/lib/python{}".format(thirdparty, PYTHON_VERSION)
            for thirdparty in python_thirdparties
        ] + [
            "../pip_deps_spl_x64_pycryptodome -> files/base/lib/python{}".format(PYTHON_VERSION),
            "../pip_deps_spl_arm64_pycryptodome -> files/base/lib/python{}".format(PYTHON_VERSION),
        ]),
    },
    # Inverted for better clarity of the package structure
    srcs_renamed = {value: key for key, value in {
        "checkAndRunExtraUpgrade.sh": "//base/products/distribution:checkAndRunExtraUpgrade.sh",
        "cleanupinstall.sh": "//base/products/distribution:cleanupinstall.sh",
        "cleanuprealm.dat": "cleanuprealm.dat",
        "files/base/bin/SulDownloader": "//base/products/Base/SulDownloader",
        "files/base/bin/UpdateScheduler": "//base/products/Base/UpdateScheduler",
        "files/base/bin/centralregistration": "//base/products/Base/CentralRegistration:centralregistration",
        "files/base/bin/machineid": ":machineid",
        "files/base/bin/manifestdiff": ":manifestdiff",
        "files/base/bin/mcsrouter": "//base/products/Base/mcsrouter:mcsrouter_sh",
        "files/base/bin/python3": "//imports/thirdparty/python:python3",
        "files/base/bin/registerCentral": "//base/products/Base/commandline:registerCentral_sh",
        "files/base/bin/sdu": "//base/products/Base/SDU:sdu",
        "files/base/bin/sophos_managementagent": "//base/products/Base/ManagementAgent:sophos_managementagent",
        "files/base/bin/sophos_watchdog": "//base/products/Base/watchdog:sophos_watchdog",
        "files/base/bin/telemetry": "//base/products/Base/Telemetry:telemetry",
        "files/base/bin/tscheduler": "//base/products/Base/TelemetryScheduler:tscheduler",
        "files/base/bin/versionedcopy": ":versionedcopy",
        "files/base/etc/DiagnosePaths.conf": "//base/products/Base/Diagnose:DiagnosePaths.conf",
        "files/base/etc/backupfileslist.dat": "backupfileslist.dat",
        "files/base/etc/datafeed-config-scheduled_query.json": "//base/products/distribution:datafeed-config-scheduled_query.json",
        "files/base/etc/downgradepaths.dat": "downgradepaths.dat",
        "files/base/etc/licenses.txt": "licenses.txt",
        "files/base/etc/logger.conf": "logger.conf",
        "files/base/etc/telemetry-config.json": ":telemetry_config",
        "files/base/lib/libpython{}.so.1.0".format(PYTHON_VERSION): "//imports/thirdparty/python:libpython",
        "files/base/lib/python{}.zip".format(PYTHON_VERSION.replace(".", "")): ":python_standard_libs_zip",
        "files/base/lib/python{}/lib-dynload/empty".format(PYTHON_VERSION): ":create_empty_file_to_create_lib_dynload_directory",
        "files/base/lib/python{}/site-packages/sseclient.py".format(PYTHON_VERSION): ":patched_sseclient",
        "files/base/lib64/mcsrouter.zip": "//base/modules/mcsrouter:mcsrouter_zip",
        "files/base/mcs/certs/mcs_rootca.crt": "//base/modules/mcsrouter/engine:mcs_rootca.crt",
        "files/base/update/rootcerts/ps_rootca.crt": ":ps_rootca_crt",
        "files/base/update/rootcerts/rootca.crt": "rootca.crt",
        "files/base/update/rootcerts/rootca384.crt": "rootca384.crt",
        "files/base/update/versig": "//common/versig",
        "files/bin/sophos_diagnose": "//base/products/Base/Diagnose:sophos_diagnose",
        "files/bin/uninstall.sh": ":uninstall_sh",
        "files/bin/version": "version",
        "files/bin/wdctl": "//base/products/Base/wdctl",
        "filestodelete.dat": "filestodelete.dat",
        "install.sh": ":install_sh",
        "installer/plugins/managementagent.json": "//base/products/Base/ManagementAgent:registry_json",
        "installer/plugins/mcsrouter.json": "//base/products/Base/mcsrouter:registry_json",
        "installer/plugins/sdu.json": "//base/products/Base/SDU:registry_json",
        "installer/plugins/tscheduler.json": "//base/products/Base/TelemetryScheduler:registry_json",
        "installer/plugins/updatescheduler.json": "//base/products/Base/UpdateScheduler:registry_json",
    }.items()},
    symbols_strip_prefix = "base/products/Base/installer",
    version_ini_locations = [
        "VERSION.ini",
        "files/base/VERSION.ini",
    ],
    versioning_component_name = BASE_VERSIONING_COMPONENT_NAME,
    visibility = [
        "//base:__pkg__",
    ],
)
