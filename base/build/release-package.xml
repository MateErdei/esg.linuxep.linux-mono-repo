<?xml version='1.0' encoding='utf-8'?>
<package name="sspl-base" version="1.1.9">
    <versioning>
        <workingdir>./products/distribution/include/AutoVersioningHeaders</workingdir>
    </versioning>
    <inputs>
        <workingdir>.</workingdir>
        <trusted-asset artifact-path="filer5-migrate/gcclinux/8-1-0-43/213047/gcclinux/gcc-8.1.0-linux.tar.gz" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/openssllinux11/1-1-1l-1/222963/output/openssl.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/cmakelinux/3-11-2-4/213056/cmakelinux/cmake-3.11.2-linux.tar.gz" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/versig/2-0-0-92/222980/output/versig.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/curllinux11/7-78-0-3/222970/output/curl.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/sullinux11/1-0-0-76/222976/output/SUL.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/boostlinux11/1-77-0-1/222969/output/boost.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/expatlinux11/2-4-1-1/222964/output/expat.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/protobuflinux11/3-17-3-1/222971/output/protobuf.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/zeromqlinux11/4-3-4-9/222030/output/zeromq.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/log4cpluslinux11/2-0-5-19/220731/output/log4cplus.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/zliblinux11/1-2-11-4/219630/output/zlib.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/pscerts/1-0-1/67228/ps_certificates/ps_rootca.crt" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/pythonlinux11/3-9-7-1/222972/output/python.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-watchdog/2-0-2-3/222028/watchdog/python-watchdog.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-pathtools/0-1-1-9/216281/pathtools/python-pathtools.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/pycryptodomelinux11/3-9-8-3/221638/pycryptodome/pycryptodome.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/googletest/1-8-1/EES-8928/googletest-release-1.8.1.tar.gz" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-certifi/2020-12-5-1/222027/certifi/python-certifi.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-urllib3/1-25-8-13/218622/urllib3/python-urllib3.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-six/1-14-0-14/218620/six/python-six.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-requests/2-22-0-10/218619/requests/python-requests.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-idna/3-1-0-3/222032/idna/python-idna.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-chardet/3-0-4-3/218617/chardet/python-chardet.tar" dest-dir="/build/input/"/>
        <trusted-asset artifact-path="filer5-migrate/python-sseclient/0-0-23-19/218716/sseclient/python-sseclient.tar" dest-dir="/build/input/"/>
        <build-asset project="thirdparty" repo="minizip">
            <release-version branch="release/linux-3.0.2" build-id="20210622151109-45729c01a79b678f7a29cf76cf770128ef856e2e-7mmYMo"/>
            <development-version branch="sophos/linux-sspl-master"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
    </inputs>
    <buildcommands>
        <!-- LINUXDAR-851 un-comment code below to allow debug build option when agreed -->
        <!--<command  buildtype="prod"> -->

        <!-- Release build -->
        <command mode="release">
            <program>/bin/bash</program>
            <args>./unpack_build_inputs.sh --ci</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="release">
            <program>/bin/bash</program>
            <args>./build2.sh --release --clean --parallel-test 1</args>
            <workingdir>.</workingdir>
        </command>

        <!-- Debug build -->
        <command mode="debug">
            <program>/bin/bash</program>
            <args>./unpack_build_inputs.sh --ci</args>
            <workingdir>.</workingdir>
        </command>
        <command mode="debug">
            <program>/bin/bash</program>
            <args>./build2.sh --debug --clean --parallel-test 1</args>
            <workingdir>.</workingdir>
        </command>

<!--        <command mode="coverage">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;clean &#45;&#45;bullseye</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

<!--        <command mode="analysis">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;no-build &#45;&#45;analysis</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

<!--        <command mode="999">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;clean &#45;&#45;999 &#45;&#45;no-unittest</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

<!--        <command mode="060">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh &#45;&#45;clean &#45;&#45;060 &#45;&#45;no-unittest</args>-->
<!--            <workingdir>.</workingdir>-->
<!--        </command>-->

<!--        &lt;!&ndash;<command buildtype="dev">-->
<!--            <program>/bin/bash</program>-->
<!--            <args>./build.sh - -clean - -debug</args> 'when put back remove space between hyphens'-->
<!--            <workingdir>sspl-base-build</workingdir>-->
<!--        </command> &ndash;&gt;-->
    </buildcommands>
    <publish>
        <workingdir>.</workingdir>
        <!-- Release -->
        <release-asset artifact-path="sspl-base/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="release"/>

        <build-asset artifact-path="sspl-base/openssl" source-dir="/build/redist/openssl" mode="release"/>
        <build-asset artifact-path="sspl-base/pluginapi" source-dir="output" mode="release">
            <include glob="pluginapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base/system_test" source-dir="output" mode="release">
            <include glob="SystemProductTestOutput.tar.gz"/>
            <include glob="symbols"/>
        </build-asset>
        <build-asset artifact-path="sspl-base/fake-management" source-dir="testUtils/SupportFiles/FakeManagement" mode="release"/>

        <!-- coverage(bullseye) -->
        <build-asset artifact-path="sspl-base-coverage/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/openssl" source-dir="/build/redist/openssl" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/pluginapi" source-dir="output" mode="coverage">
            <include glob="pluginapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-coverage/system_test" source-dir="output" mode="coverage">
            <include glob="SystemProductTestOutput.tar.gz"/>
            <include glob="symbols"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-coverage/build_log" source-dir="log" mode="coverage"/>

        <build-asset artifact-path="sspl-base-coverage/unittest-htmlreport" source-dir="output/coverage/sspl-base-unittest" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/covfile" source-dir="output/" mode="coverage">
            <include glob="./*.cov"/>
        </build-asset>

        <!-- Analysis -->
        <build-asset artifact-path="sspl-base/analysis" source-dir="output/analysis" mode="analysis"/>
        <build-asset artifact-path="sspl-base/analysis_build_log" source-dir="log" mode="analysis"/>


        <!-- 999 -->
        <release-asset artifact-path="sspl-base-999/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="999"/>
        <!-- 060 -->
        <release-asset artifact-path="sspl-base-060/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="060"/>

        <!-- Legacy -->
        <workingdir>.</workingdir>
        <destdir>sspl-base</destdir>
        <buildoutputs>
            <!-- Release  oldci-->
            <output name="output" srcfolder="output" artifactpath="output" mode="oldci"/>
            <output name="openssl" srcfolder="/build/redist/openssl" artifactpath="openssl" mode="oldci"/>
            <output name="build_log" srcfolder="log" mode="oldci"/>
        </buildoutputs>
        <publishbranches>master,feature,release,develop,bugfix</publishbranches>
    </publish>
</package>
