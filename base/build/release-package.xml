<?xml version='1.0' encoding='utf-8'?>
<package name="sspl-base" version="1.2.2">
    <versioning>
        <workingdir>./products/distribution/include/AutoVersioningHeaders</workingdir>
    </versioning>
    <inputs>
        <workingdir>.</workingdir>
        <build-asset project="linuxep" repo="sul">
            <release-version branch="release/Version_1_0_1" build-id="20220822170900-3cc5f9a78dbbac072646d2b5379de43790212405-AR95mL"/>
            <development-version branch="develop"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="linuxep" repo="versig">
            <release-version branch="release/Version_2_0_0" build-id="20220727094738-a99112d63f8fc2b87e53e7e69e687cf4fd890434-OYVMQC"/>
            <development-version branch="master"/>
            <include artifact-path="output" dest-dir="/build/input/"/>
        </build-asset>

        <build-asset project="thirdparty" repo="boost">
            <release-version branch="release/sspl/Version_1_78_0" build-id="20220310141901-bdae372a9027e1760f105dc819023a49ef444765-xdQFp9"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="thirdparty" repo="curl">
            <release-version branch="release/sspl/Version_7_84_0" build-id="20220822152212-f128f504bb954bd08e1b0f48fada7c5a73dc94f8-SnVSla"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="thirdparty" repo="gcc">
            <release-version branch="release/Version_11_2_0" build-id="20220310091547-cf8f7ca9572a3bc9a68f05138086815341a49224-cZ84iF"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="thirdparty" repo="log4cplus">
            <release-version branch="release/sspl/Version_2_0_7" build-id="20220310142847-3a4bb813dfdcbf28d538394d253449fbb7c78bad-rAcfZX"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="thirdparty" repo="openssl">
            <release-version branch="release/sspl/Version_1_1_1q" build-id="20220725102623-b49f6c504d454be8e7bc6a7dc7f7528b53920bdc-iF7TY0"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="thirdparty" repo="protobuf">
            <release-version branch="release/sspl/Version_3_17_3" build-id="20220310143632-66a638734ca9de06319cfc97fdd27ac200fdec15-yMZBAU"/>
            <include artifact-path="output" dest-dir="/build/input"/>
        </build-asset>
        <build-asset project="thirdparty" repo="libxcrypt">
            <release-version branch="release/version_4_4_28" build-id="20220325112559-16cdaea644b21a42436fbffb79ab4aa5aa9a1b6e-tFdACT"/>
            <include artifact-path="libxcrypt" dest-dir="/build/input" />
        </build-asset>
        <trusted-asset artifact-path="filer5-migrate/pscerts/1-0-1/67228/ps_certificates/ps_rootca.crt" dest-dir="/build/input/"/>

        <build-asset project="em" repo="esg">
            <release-version branch="release/WIN-SPRINT-2023.10"
                             build-id="20230303190457-b2493e357e0f270450a8bc1154c4644841785404-Yo7Ilu"/>
            <development-version branch="develop"/>
            <include artifact-path="sophlib/include" dest-dir="/build/input/sophlib/include/sophlib"/>
            <include artifact-path="sophlib/linux_x86-64" dest-dir="/build/input/sophlib/lib64"/>

            <include artifact-path="thirdparty/zlib-linux-opt" dest-dir="/build/redist/zlib"/>
            <include artifact-path="thirdparty/zmq-linux-opt" dest-dir="/build/redist/zeromq"/>
            <include artifact-path="thirdparty/googletest-linux-opt" dest-dir="/build/redist/googletest"/>
            <include artifact-path="thirdparty/expat-linux-opt" dest-dir="/build/redist/expat"/>
            <include artifact-path="thirdparty/minizip-linux-opt" dest-dir="/build/redist/minizip"/>
            <include artifact-path="thirdparty/liblzma-linux-opt" dest-dir="/build/redist/lzma"/>
            <include artifact-path="thirdparty/bzip2-linux-opt" dest-dir="/build/redist/bzip2"/>
            <include artifact-path="thirdparty/gsl" dest-dir="/build/redist/gsl"/>
        </build-asset>

        <build-asset project="winep" repo="sau">
            <release-version branch="release/WINEP-2022.39-DTP2" build-id="20221003091945-90720120553d2d122effccb97edd4ccbcc5ea61e-MzUwFE"/>
            <development-version branch="develop"/>
            <include artifact-path="Linux-x64/SDDS3-Lib" dest-dir="/build/input"/>
            <include artifact-path="Linux-x64/SDDS3-Utils" dest-dir="/build/input/sdds3"/>
        </build-asset>

        <trusted-asset artifact-path="org.cmake/cmake-3.26.0/cmake-3.26.0" dest-dir="/build/input/cmake"/>
        <trusted-asset artifact-path="esg/python_dependencies/20230228/linux_spl" dest-dir="/build/input/pypi"/>
        <trusted-asset artifact-path="org.python/linux/3.11.1/cpython-3.11.1 20230116-x86_64-unknown-linux-gnu-install_only" dest-dir="/build/input"/>
    </inputs>
    <buildcommands>

        <!-- Common build steps -->
        <command>
            <program>/bin/bash</program>
            <args>./unpack_build_inputs.sh</args>
            <workingdir>.</workingdir>
        </command>

        <!-- Release build -->
        <command mode="release">
            <program>/bin/bash</program>
            <args>./build.sh --release</args>
            <workingdir>.</workingdir>
        </command>

        <!-- Debug build -->
        <command mode="debug">
            <program>/bin/bash</program>
            <args>./build.sh --debug</args>
            <workingdir>.</workingdir>
        </command>

        <!-- Coverage build -->
        <command mode="coverage">
            <program>/bin/bash</program>
            <args>./build.sh --clean --bullseye --release</args>
            <workingdir>.</workingdir>
        </command>

        <!-- Static analysis build -->
        <command mode="analysis">
            <program>/bin/bash</program>
            <args>./build.sh --no-build --analysis</args>
            <workingdir>.</workingdir>
        </command>

        <!-- 999 version Build-->
        <command mode="999">
            <program>/bin/bash</program>
            <args>./build.sh --clean --999 --no-unittest --release</args>
            <workingdir>.</workingdir>
        </command>

        <!-- 060 version Build-->
        <command mode="060">
            <program>/bin/bash</program>
            <args>./build.sh --clean --060 --no-unittest --release</args>
            <workingdir>.</workingdir>
        </command>
    </buildcommands>
    <publish>
        <workingdir>.</workingdir>

        <!-- Release -->
        <release-asset artifact-path="sspl-base/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="release"/>
        <release-asset artifact-path="sspl-base/RA-SDDS-COMPONENT" source-dir="output/RA-SDDS-COMPONENT"
                       mode="release"/>
        <release-asset artifact-path="sspl-base/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="release"/>
        <release-asset artifact-path="sspl-base/RA-SDDS3-PACKAGE" source-dir="output/RA-SDDS3-PACKAGE" mode="release"/>
        <release-asset artifact-path="sspl-base/base-symbols" source-dir="output/base-symbols" mode="release"/>
        <release-asset artifact-path="sspl-base/ra-symbols" source-dir="output/ra-symbols" mode="release"/>

        <build-asset artifact-path="sspl-base/openssl" source-dir="/build/redist/openssl" mode="release"/>
        <build-asset artifact-path="sspl-base/pluginapi" source-dir="output" mode="release">
            <include glob="pluginapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base/cmcsrouterapi" source-dir="output" mode="release">
            <include glob="cmcsrouterapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base/mcs" source-dir="output" mode="release">
            <include glob="mcs.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base/system_test" source-dir="output" mode="release">
            <include glob="SystemProductTestOutput.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base/fake-management" source-dir="testUtils/SupportFiles/FakeManagement" mode="release"/>

        <!-- coverage(bullseye) -->
        <build-asset artifact-path="sspl-base-coverage/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/RA-SDDS-COMPONENT" source-dir="output/RA-SDDS-COMPONENT" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/RA-SDDS3-PACKAGE" source-dir="output/RA-SDDS3-PACKAGE" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/openssl" source-dir="/build/redist/openssl" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/pluginapi" source-dir="output" mode="coverage">
            <include glob="pluginapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-coverage/mcs" source-dir="output" mode="coverage">
            <include glob="mcs.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-coverage/system_test" source-dir="output" mode="coverage">
            <include glob="SystemProductTestOutput.tar.gz"/>
            <include glob="symbols"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-coverage/build_log" source-dir="log" mode="coverage"/>

        <build-asset artifact-path="sspl-base-coverage/unittest-htmlreport" source-dir="output/coverage/sspl-base-unittest" mode="coverage"/>
        <build-asset artifact-path="sspl-base-coverage/covfile" source-dir="output/" mode="coverage">
            <include glob="./*.cov"/>
        </build-asset>

        <!-- Analysis -->
        <build-asset artifact-path="sspl-base/analysis" source-dir="output/analysis" mode="analysis"/>
        <build-asset artifact-path="sspl-base/analysis_build_log" source-dir="log" mode="analysis"/>

        <!-- 999 -->
        <release-asset artifact-path="sspl-base-999/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="999"/>
        <release-asset artifact-path="sspl-base-999/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="999"/>
        <release-asset artifact-path="sspl-base-999/RA-SDDS-COMPONENT" source-dir="output/RA-SDDS-COMPONENT" mode="999"/>
        <release-asset artifact-path="sspl-base-999/RA-SDDS3-PACKAGE" source-dir="output/RA-SDDS3-PACKAGE" mode="999"/>
        <!-- 060 -->
        <release-asset artifact-path="sspl-base-060/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="060"/>
        <release-asset artifact-path="sspl-base-060/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="060"/>

        <!--TODO: LINUXDAR-6488 - get all build modes working with old artifact path-->
        <!-- debug -->
        <build-asset artifact-path="sspl-base-debug/SDDS-COMPONENT" source-dir="output/SDDS-COMPONENT" mode="debug"/>
        <build-asset artifact-path="sspl-base-debug/RA-SDDS-COMPONENT" source-dir="output/RA-SDDS-COMPONENT" mode="debug"/>
        <build-asset artifact-path="sspl-base-debug/SDDS3-PACKAGE" source-dir="output/SDDS3-PACKAGE" mode="debug"/>
        <build-asset artifact-path="sspl-base-debug/RA-SDDS3-COMPONENT" source-dir="output/RA-SDDS-COMPONENT" mode="debug"/>

        <build-asset artifact-path="sspl-base-debug/openssl" source-dir="/build/redist/openssl" mode="debug"/>
        <build-asset artifact-path="sspl-base-debug/pluginapi" source-dir="output" mode="debug">
            <include glob="pluginapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-debug/cmcsrouterapi" source-dir="output" mode="debug">
            <include glob="cmcsrouterapi.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-debug/mcs" source-dir="output" mode="debug">
            <include glob="mcs.tar.gz"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-debug/system_test" source-dir="output" mode="debug">
            <include glob="SystemProductTestOutput.tar.gz"/>
            <include glob="symbols"/>
        </build-asset>
        <build-asset artifact-path="sspl-base-debug/fake-management" source-dir="testUtils/SupportFiles/FakeManagement" mode="debug"/>

        <publishbranches>master,feature,release,develop,bugfix,debug</publishbranches>
    </publish>
</package>
