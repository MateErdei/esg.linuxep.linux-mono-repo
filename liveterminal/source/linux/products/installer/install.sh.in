#!/usr/bin/env bash

# Copyright 2020-2023 Sophos Limited.  All rights reserved.
set -x

PLUGIN_NAME=@PLUGIN_NAME@
PRODUCT_LINE_ID="@PRODUCT_LINE_ID@"

EXIT_FAIL_CREATE_DIRECTORY=10
EXIT_FAIL_FIND_GROUPADD=11
EXIT_FAIL_ADD_GROUP=12
EXIT_FAIL_FIND_USERADD=13
EXIT_FAIL_ADDUSER=14
EXIT_FAIL_FIND_GETENT=15
EXIT_FAIL_WDCTL_FAILED_TO_COPY=16
EXIT_FAIL_WDCTL_FAILED_TO_START=17
EXIT_FAIL_VERSIONEDCOPY=20
EXIT_FAIL_SERVICE=40

STARTINGDIR=$(pwd)
SCRIPTDIR=${0%/*}
if [[ "$SCRIPTDIR" == "$0" ]]
then
    SCRIPTDIR=${STARTINGDIR}
fi

ABS_SCRIPTDIR=$(cd $SCRIPTDIR && pwd)

source ${ABS_SCRIPTDIR}/cleanupinstall.sh
source ${ABS_SCRIPTDIR}/checkAndRunExtraUpgrade.sh

[[ -n "$DIST" ]] || DIST=$ABS_SCRIPTDIR

failure()
{
    local CODE=$1
    shift
    echo "$@" >&2
    exit $CODE
}
export DIST
export SOPHOS_INSTALL
export LD_LIBRARY_PATH="$SOPHOS_INSTALL/base/lib64"

USER_NAME=root
GROUP_NAME=root

function is_already_installed()
{
    [[ -d "$SOPHOS_INSTALL/plugins/${PLUGIN_NAME}/bin/liveresponse" ]]
}

[[ -d $SOPHOS_INSTALL ]] || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to find installation directory: $SOPHOS_INSTALL"

# In case this is an upgrade (not a clean install) request the watchdog stops the plugin
if is_already_installed
then
    "${SOPHOS_INSTALL}/bin/wdctl" stop "${PLUGIN_NAME}" --quiet &>/dev/null || echo Failed to stop plugin: ${PLUGIN_NAME}
fi

check_for_upgrade  "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/VERSION.ini" ${PRODUCT_LINE_ID} ${DIST}

#Create plugin registration file
TEMP_REG_FILE=${SOPHOS_INSTALL}/tmp/${PLUGIN_NAME}.json
sed "s;SOPHOS_INSTALL_VALUE;${SOPHOS_INSTALL};g" "${DIST}/files/base/pluginRegistry/${PLUGIN_NAME}.json" >  "${TEMP_REG_FILE}"
"${SOPHOS_INSTALL}/bin/wdctl" copyPluginRegistration "${TEMP_REG_FILE}" || failure ${EXIT_FAIL_WDCTL_FAILED_TO_COPY} "Failed to copy registration ${TEMP_REG_FILE}"
rm -f ${TEMP_REG_FILE}

#Install files
for F in $(find $DIST/files/plugins -type f)
do
    $SOPHOS_INSTALL/base/bin/versionedcopy $F || failure ${EXIT_FAIL_VERSIONEDCOPY} "Failed to copy $F to installation"
done


generate_manifest_diff $DIST ${PRODUCT_LINE_ID}

mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/log || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create ${PLUGIN_NAME} log dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/var || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create ${PLUGIN_NAME} var dir"
mkdir -p ${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/tmp || failure ${EXIT_FAIL_CREATE_DIRECTORY} "Failed to create ${PLUGIN_NAME} tmp dir"

chmod 0750 "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/bin/"*

chown -R ${USER_NAME}:${GROUP_NAME} "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}"

ln -snf "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/bin/uninstall.sh" "${SOPHOS_INSTALL}/base/update/var/installedproducts/${PRODUCT_LINE_ID}.sh"
ln -snf "${SOPHOS_INSTALL}/plugins/${PLUGIN_NAME}/VERSION.ini" "${SOPHOS_INSTALL}/base/update/var/installedproductversions/${PRODUCT_LINE_ID}.ini"

if software_changed ${DIST} ${PRODUCT_LINE_ID}
then
    perform_cleanup ${DIST} ${PRODUCT_LINE_ID}
fi

copy_manifests ${DIST} ${PRODUCT_LINE_ID}

#After install start the plugin
"${SOPHOS_INSTALL}/bin/wdctl" start "${PLUGIN_NAME}" --quiet || failure ${EXIT_FAIL_WDCTL_FAILED_TO_START} "Failed to start plugin ${PLUGIN_NAME}"

# perform final checks to ensure plugin has been installed and is running.
function confirmProcessRunning()
{
    pgrep -f "$1" &> /dev/null
}

# Check key files have been installed
[[ -f "${SOPHOS_INSTALL}/plugins/liveresponse/bin/liveresponse" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "liveresponse executable failed to be installed"
[[ -f "${SOPHOS_INSTALL}/base/update/var/installedproducts/ServerProtectionLinux-Plugin-liveresponse.sh" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "liveresponse uninstall link file failed to be created"
[[ -f "${SOPHOS_INSTALL}/base/update/var/installedproductversions/ServerProtectionLinux-Plugin-liveresponse.ini" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "liveresponse version link file failed to be created"
[[ -f "${SOPHOS_INSTALL}/plugins/liveresponse/bin/uninstall.sh" ]] || failure ${EXIT_FAIL_VERSIONEDCOPY} "liveresponse uninstall script failed to be installed"

echo "liveresponse,${PRODUCT_LINE_ID}" >> "${SOPHOS_INSTALL}/base/update/var/installedComponentTracker"
